settings
{
	main
	{
		Description: "Samohtaerg喜爱格斗游戏"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Max Spectators: 12
	}

	modes
	{
		Elimination
		{
			enabled maps
			{
				Ayutthaya
				Workshop Island
			}
		}

		General
		{
			Capture Objective Tiebreaker: Off
			Draw After Match Time Elapsed With No Tiebreaker: 300
			Hero Limit: Off
			Score To Win: 3
			Spawn Health Packs: Disabled
			Tiebreaker After Match Time Elapsed: 300
		}
	}

	heroes
	{
		General
		{
			Ability Cooldown Time: 80%
			Jump Vertical Speed: 125%

			Baptiste
			{
				Ammunition Clip Size Scalar: 25%
				Health: 150%
				Regenerative Burst: Off
				Secondary Fire: Off
			}

			Brigitte
			{
				Damage Dealt: 75%
				Healing Received: 40%
				Health: 125%
				Shield Bash Cooldown Time: 0%
				Whip Shot Cooldown Time: 130%
			}

			Doomfist
			{
				Ammunition Clip Size Scalar: 25%
				Health: 130%
				Primary Fire: Off
				Projectile Speed: 20%
				Ultimate Generation - Combat Meteor Strike: 120%
			}

			Genji
			{
				Ammunition Clip Size Scalar: 25%
				Damage Dealt: 65%
				Deflect Cooldown Time: 15%
				Health: 300%
				Infinite Ultimate Duration: On
				Jump Vertical Speed: 83%
				Movement Gravity: 130%
				Movement Speed: 60%
				No Ammunition Requirement: On
				Primary Fire: Off
				Projectile Speed: 101%
				Spawn With Ultimate Ready: On
				Swift Strike Cooldown Time: 25%
				Ultimate Duration: 25%
				Ultimate Generation - Combat Dragonblade: 500%
				Ultimate Generation - Passive Dragonblade: 500%
				Ultimate Generation Dragonblade: 500%
			}

			Hanzo
			{
				Damage Dealt: 40%
				Spawn With Ultimate Ready: On
			}

			Junkrat
			{
				Damage Dealt: 70%
			}

			Reinhardt
			{
				Barrier Field: Off
				Charge: Off
				Health: 130%
			}

			Roadhog
			{
				Ammunition Clip Size Scalar: 25%
				Damage Dealt: 50%
				Healing Received: 50%
				Movement Speed: 90%
				Projectile Speed: 90%
				Secondary Fire: Off
				Take a Breather Cooldown Time: 200%
				Ultimate Ability Whole Hog: Off
			}

			Sigma
			{
				Accretion Knockback Scalar: 80%
				Damage Dealt: 80%
				Experimental Barrier: Off
				Health: 105%
				Jump Vertical Speed: 130%
				Movement Gravity: 90%
			}

			Torbjörn
			{
				Damage Dealt: 115%
				Deploy Turret: Off
				Health: 170%
				Jump Vertical Speed: 140%
				Movement Gravity: 115%
				Movement Speed: 110%
				Weapons Enabled: Forge Hammer Only
			}

			Tracer
			{
				Spawn With Ultimate Ready: On
			}

			Winston
			{
				Damage Dealt: 80%
				Infinite Ultimate Duration: On
				Primal Rage Melee Knockback Scalar: 85%
				Spawn With Ultimate Ready: On
			}

			Wrecking Ball
			{
				Piledriver Cooldown Time: 0%
			}

			enabled heroes
			{
				Genji
			}
		}
	}

	extensions
	{
		Beam Effects
		Buff Status Effects
		Debuff Status Effects
		Buff and Debuff Sounds
		Energy Explosion Effects
		Kinetic Explosion Effects
		Explosion Sounds
		Play More Effects
	}
}

variables
{
	global:
		0: spawnA
		1: spawnB
		2: practiceMatch
		3: inputsArray
		4: camPoint1
		5: camPoint2
		6: camPoint3
		8: camPoint5
		9: camPoint4
		19: gameOver
		24: mapYfloor
		25: mapDetector

	player:
		2: realAltitude
		4: enemy
		5: activateCams
		6: abilActivator
		7: ProjectileSpeed
		9: defaultCam
		10: K
		11: L
		12: M
		13: N
		15: abilCooldown1
		16: tempEntityEffect
		17: tempCD
		18: text1
		20: finisher
		21: abilCooldown2
		22: abilCooldown3
		23: Guide
		24: Guide1
		25: GroundStrike
}

rule("--------------------------------------------------------------------------------------------------------------------------基础设定-----------------------------------------------------------------------------------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("出生点-AYU")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Global.mapDetector == 42;
		Current Map == Map(Ayutthaya);
	}

	actions
	{
		Global.spawnA = Vector(15, 21, 88);
		Global.spawnB = Vector(18, 21, 81);
		Global.mapYfloor = 14;
	}
}

rule("出生点 - ISLAND")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Global.mapDetector == 186;
		Current Map == Map(Workshop Island);
	}

	actions
	{
		Global.spawnA = Vector(0, 0, 10);
		Global.spawnB = Vector(0, 0, -10);
		Global.mapYfloor = -10;
	}
}

rule("出生点 - ISLAND晚上")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Global.mapDetector == 186;
		Current Map == Map(Workshop Island Night);
	}

	actions
	{
		Global.spawnA = Vector(0, 0, 10);
		Global.spawnB = Vector(0, 0, -10);
		Global.mapYfloor = -10;
	}
}

rule("出生点 - OAS")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Global.mapDetector == 186;
		Current Map == Map(Oasis City Center);
	}

	actions
	{
		Global.spawnA = Vector(61.624, 31.943, 317.456);
		Global.spawnB = Vector(68.420, 31.943, 328.952);
		Global.mapYfloor = 26;
	}
}

rule("定义Enemy变量")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.enemy = Players In Slot(0, Opposite Team Of(Team Of(Event Player)));
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("定义realAltitude变量")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.realAltitude = Distance Between(Position Of(Event Player), Ray Cast Hit Position(Position Of(Event Player),
			Position Of(Event Player) + Vector(0, -10, 0), Null, All Players(All Teams), False));
		Wait(0.016, Ignore Condition);
		Loop;
	}
}

rule("掉落平台下-击杀")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Y Component Of(Position Of(Event Player)) < Global.mapYfloor) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Damage(Event Player, Null, 3);
		Wait(0.020, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("减少集结时间")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("--------------------------------------------------------------------------------------------------------------------------出生设定-----------------------------------------------------------------------------------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("直接拔刀")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Press Button(Event Player, Button(Ultimate));
	}
}

rule("tp if game started. SET f = 1 to enable cams and facing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.tempEntityEffect = 0;
		Clear Status(Event Player, Burning);
		Clear Status(Event Player, Knocked Down);
		Clear Status(Event Player, Stunned);
		Skip If(Team Of(Event Player) == Team 2, 1);
		Teleport(Event Player, Global.spawnA);
		Skip If(Team Of(Event Player) == Team 1, 1);
		Teleport(Event Player, Global.spawnB);
		Event Player.activateCams = 1;
		Skip If(Hero Of(Event Player) != Hero(Winston), 1);
		Press Button(Event Player, Button(Ultimate));
		Wait(0.250, Ignore Condition);
		Skip If(Hero Of(Event Player) != Hero(Genji), 1);
		Press Button(Event Player, Button(Ultimate));
	}
}

rule("开始比赛前Rooted")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Set Status(Event Player, Null, Rooted, 1);
	}
}

rule("----------------------------------------------------------------------------------------------------------------------第三人称视角设定-----------------------------------------------------------------------------------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("重要Player variables setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.I = 0.500;
		Event Player.defaultCam = 1;
		Event Player.activateCams = 1;
		Skip If(Hero Of(Event Player) != Hero(Reinhardt), 1);
		Set Ability 1 Enabled(Event Player, False);
	}
}

rule("视角相关基础设置")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Bastion);
		Hero Of(Event Player) != Hero(Soldier: 76);
		Hero Of(Event Player) != Hero(Brigitte);
		Hero Of(Event Player) != Hero(Doomfist);
		Hero Of(Event Player) != Hero(D.Va);
		Hero Of(Event Player) != Hero(Mercy);
		Hero Of(Event Player) != Hero(Moira);
		Hero Of(Event Player) != Hero(Orisa);
		Hero Of(Event Player) != Hero(Pharah);
		Hero Of(Event Player) != Hero(Reaper);
		Hero Of(Event Player) != Hero(Reinhardt);
		Hero Of(Event Player) != Hero(Roadhog);
		Hero Of(Event Player) != Hero(Symmetra);
		Hero Of(Event Player) != Hero(Winston);
		Hero Of(Event Player) != Hero(Wrecking Ball);
		Hero Of(Event Player) != Hero(Zarya);
	}

	actions
	{
		Event Player.K = -1.500;
		Event Player.L = 50;
		Event Player.M = 1.500;
		Event Player.N = 1.500;
	}
}

rule("第三人称")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Has Spawned(Event Player) == True;
		disabled Players On Hero(Hero(Genji), All Teams) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Start Camera(Event Player, Event Player + World Vector Of(Vector(-0.800, 0, 0), Event Player, Rotation)
			+ Up * Event Player.M + Facing Direction Of(Event Player) * Event Player.K,
			Event Player + Up * Event Player.N + Facing Direction Of(Event Player) * Event Player.L, 100);
		disabled Wait(0.250, Ignore Condition);
		disabled Abort If Condition Is False;
	}
}

rule("镜头")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		disabled Global.camPoint1 = Vector(17.165, 22.500, 82.089);
		disabled Global.camPoint2 = Vector(17.035, 22.500, 75.659);
		disabled Global.camPoint3 = Vector(20, 30, 75);
		disabled Global.camPoint4 = Vector(17.165, 22.500, 70);
		disabled Global.camPoint5 = Vector(17.370, 22.199, 50.468);
		Global.camPoint1 = Global.spawnA + Vector(0, 0.300, 7);
		Global.camPoint2 = Global.spawnA + Vector(0, 0.300, 0);
		Global.camPoint3 = Global.spawnA + Vector(3, 8, 0);
		Global.camPoint4 = Global.spawnA + Vector(0, 0.300, -5);
		Global.camPoint5 = Global.spawnA + Vector(0, 0.300, -20);
	}
}

disabled rule("朝向 很重要Start Facing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.enemy != 0;
		Event Player.activateCams == 1;
		Is Game In Progress == True;
		Event Player.abilActivator != 1;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.enemy)), 700, To World,
			Direction and Turn Rate);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("START CAMERA FIXED close")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Event Player.enemy) <= 6;
		Event Player.enemy != 0;
		Event Player.activateCams == 1;
		Event Player.abilActivator != 1;
		Global.gameOver == 0;
		Event Player.finisher == 0;
	}

	actions
	{
		Start Camera(Event Player, Eye Position(Event Player) + Direction From Angles(Horizontal Facing Angle Of(Event Player), 0)
			* Distance Between(Eye Position(Event Player), Eye Position(Event Player.enemy)) * Event Player.I + Direction From Angles(
			Horizontal Facing Angle Of(Event Player) + -90, 0) * 4, Eye Position(Event Player) + Direction From Angles(
			Horizontal Facing Angle Of(Event Player), 0) * (Distance Between(Eye Position(Event Player), Event Player.enemy) / 2), 20);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("START CAMERA FAR")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Event Player.enemy) > 6;
		Event Player.enemy != 0;
		Event Player.activateCams == 1;
		Event Player.abilActivator != 1;
		Global.gameOver == 0;
		Event Player.finisher == 0;
	}

	actions
	{
		Start Camera(Event Player, Eye Position(Event Player) + Direction From Angles(Horizontal Facing Angle Of(Event Player), 0)
			* Distance Between(Eye Position(Event Player), Eye Position(Event Player.enemy)) * Event Player.I + Direction From Angles(
			Horizontal Facing Angle Of(Event Player) + -90, 0) * Distance Between(Eye Position(Event Player), Event Player.enemy)
			* Event Player.defaultCam, Eye Position(Event Player) + Direction From Angles(Horizontal Facing Angle Of(Event Player), 0) * (
			Distance Between(Eye Position(Event Player), Event Player.enemy) / 2), 20);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("EMERGENCY RESET CAMERA/FACING")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Stop Camera(Event Player);
		Stop Facing(Event Player);
		Start Camera(Event Player, Eye Position(Event Player) + Direction From Angles(Horizontal Facing Angle Of(Event Player), 0)
			* Distance Between(Eye Position(Event Player), Eye Position(Event Player.enemy)) * Event Player.I + Direction From Angles(
			Horizontal Facing Angle Of(Event Player) + -90, 0) * Distance Between(Eye Position(Event Player), Event Player.enemy)
			* Event Player.defaultCam, Eye Position(Event Player) + Direction From Angles(Horizontal Facing Angle Of(Event Player), 0) * (
			Distance Between(Eye Position(Event Player), Event Player.enemy) / 2), 10);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.enemy)), 700, To World,
			Direction and Turn Rate);
	}
}

rule("--------------------------------------------------------------------------------------------------------------------------技能介绍和开关-----------------------------------------------------------------------------------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Genji 技能介绍   开关")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	actions
	{
		Skip If(Event Player.Guide == True, 2);
		Event Player.Guide = True;
		Abort;
		Event Player.Guide = False;
		Destroy All HUD Text;
		Press Button(Event Player, Button(Ultimate));
	}
}

rule("Genji 技能介绍  显示")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Hero Of(Event Player) == Hero(Genji);
		disabled Is Game In Progress == True;
		Event Player.Guide == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String(" \r\n  \r\n \r\n \r\n "), Top, 4, Color(White), Color(White), Color(
			White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("动作1: 疾 = {0} + {1}  ", Custom String("方向键"), Input Binding String(Button(
			Secondary Fire))), Top, 5, Color(Green), Color(White), Color(Lime Green), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("动作 2: 渊 = {0} + {1} ", Custom String("空中"), Input Binding String(Button(
			Secondary Fire))), Top, 6, Color(White), Color(White), Color(Lime Green), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("特殊技能1: 南风= {0} + {1}  ", Custom String("换弹"), Input Binding String(Button(
			Secondary Fire))), Top, 7, Color(White), Color(White), Color(Lime Green), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("特殊技能2: 无相  {0} + {1}  ", Custom String("跳跃"), Custom String("换弹")), Top,
			8, Color(White), Color(White), Color(Lime Green), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("特殊技能 3: 雾隐 = {0} + {1} (お前はもう死んでいる) ", Input Binding String(Button(
			Primary Fire)), Custom String("换弹")), Top, 9, Color(White), Color(White), Color(Lime Green), Visible To and String,
			Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("被动技能1 : 宁静 = {0} ", Custom String("近战")), Top, 10, Color(White), Color(
			White), Color(Lime Green), Visible To and String, Default Visibility);
		Event Player.text1 = Last Text ID;
	}
}

rule("技能冷却时间  开关")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	actions
	{
		Skip If(Event Player.Guide1 == True, 2);
		Event Player.Guide1 = True;
		Abort;
		Event Player.Guide1 = False;
		Destroy All HUD Text;
	}
}

rule("Genji 技能冷却  显示")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Guide1 == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String("{0} {1} {2}", Custom String("特殊技能 1: 南风"), Custom String("  "),
			Event Player.abilCooldown1), Right, 1, Color(Green), Color(Green), Color(Lime Green), Visible To and String,
			Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("{0} {1} {2}", Custom String("特殊技能 2: 无相"), Custom String("  "),
			Event Player.abilCooldown2), Right, 2, Color(White), Color(White), Color(Lime Green), Visible To and String,
			Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("{0} {1} {2}", Custom String("特殊技能 3: 雾隐"), Custom String("  "),
			Event Player.abilCooldown3), Right, 3, Color(White), Color(White), Color(Lime Green), Visible To and String,
			Default Visibility);
	}
}

rule("对手数量不足")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Players In Slot(0, Opposite Team Of(Team Of(Event Player))) == Null;
		Is Waiting For Players == True;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("至少需要2名玩家。按{0} 加入一个机器人", Input Binding String(Button(Interact))));
		Wait(3, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Genji初始设置")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Genji);
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, False);
		Wait(1, Ignore Condition);
		Set Primary Fire Enabled(Event Player, True);
	}
}

rule("--------------------------------------------------------------------------------------------------------------------------技能设定-----------------------------------------------------------------------------------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("--------------------------------------------------突进-----------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("简易左突进")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(1, 0, 0);
		Is On Ground(Event Player) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Secondary Fire));
		Apply Impulse(Event Player, Vector(1, 0, 0), 50, To Player, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Doomfist Rising Uppercut Leap Effect, Color(White), Event Player, 1);
		Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(White), Event Player, 1, Visible To Position and Radius);
		Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(White), Event Player, 80);
		Set Status(Event Player, Null, Rooted, 0.100);
		Wait(0.100, Ignore Condition);
		Destroy All Effects;
		Wait(1.500, Ignore Condition);
		Allow Button(Event Player, Button(Secondary Fire));
	}
}

rule("简易右突进")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(-1, 0, 0);
		Is On Ground(Event Player) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Secondary Fire));
		Apply Impulse(Event Player, Vector(-1, 0, 0), 50, To Player, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Doomfist Rising Uppercut Leap Effect, Color(White), Event Player, 1);
		Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(White), Event Player, 1, Visible To Position and Radius);
		Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(White), Event Player, 80);
		Set Status(Event Player, Null, Rooted, 0.100);
		Wait(0.100, Ignore Condition);
		Destroy All Effects;
		Wait(1.500, Ignore Condition);
		Allow Button(Event Player, Button(Secondary Fire));
	}
}

rule("简易前突进")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(0, 0, 1);
		Is On Ground(Event Player) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Secondary Fire));
		Apply Impulse(Event Player, Vector(0, 0, 1), 50, To Player, Cancel Contrary Motion);
		disabled Play Effect(All Players(All Teams), Doomfist Rising Uppercut Leap Effect, Color(White), Event Player, 1);
		Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(White), Event Player, 1, Visible To Position and Radius);
		Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(White), Event Player, 80);
		disabled Set Move Speed(Event Player, 110);
		Wait(0.100, Ignore Condition);
		Destroy All Effects;
		Wait(1.500, Ignore Condition);
		Allow Button(Event Player, Button(Secondary Fire));
	}
}

disabled rule("停止加速")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Throttle Of(Event Player) != Vector(0, 0, 1);
	}

	actions
	{
		Set Move Speed(Event Player, 75);
	}
}

rule("简易后突进")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(0, 0, -1);
		Is On Ground(Event Player) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Secondary Fire));
		Apply Impulse(Event Player, Vector(0, 0, -1), 80, To Player, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Doomfist Rising Uppercut Leap Effect, Color(White), Event Player, 1);
		Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Color(White), Event Player, 1, Visible To Position and Radius);
		Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Color(White), Event Player, 80);
		Set Status(Event Player, Null, Rooted, 0.100);
		Wait(0.100, Ignore Condition);
		Destroy All Effects;
		Wait(1.500, Ignore Condition);
		Allow Button(Event Player, Button(Secondary Fire));
	}
}

disabled rule("瞬间下落-简易")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		disabled Throttle Of(Event Player) == Vector(0, 0, -1);
		Is In Air(Event Player) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Button Held(Event Player, Button(Reload)) == False;
		Is On Ground(Event Player) == False;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Vector(0, -1, 0), 200, To Player, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Lime Green), Event Player, 1);
		disabled Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player, 20);
		Set Knockback Dealt(Players Within Radius(Event Player, 5, All Teams, Off), 100);
	}
}

rule("-----------------------------------------------------------------------------------Genji主要技能-----------------------------------------------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("++ABILITY: Genji特殊招式1: 南风")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Genji);
		Is Dummy Bot(Event Player) == False;
		disabled Throttle Of(Event Player) == Vector(0, 0, -1);
		disabled Is Jumping(Event Player) == True;
		Is In Air(Event Player) == False;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Button Held(Event Player, Button(Reload)) == True;
		Event Player.abilCooldown1 == 0;
	}

	actions
	{
		Event Player.abilCooldown1 = 15;
		Chase Player Variable At Rate(Event Player, abilCooldown1, 0, 1, Destination and Rate);
		Create Dummy Bot(Hero(Hanzo), Team Of(Event Player), -1, Position Of(Event Player) + Facing Direction Of(Event Player) * 1.500,
			Event Player.enemy);
		Wait(0.050, Ignore Condition);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Position Of(Players On Hero(Hero(Hanzo), Team Of(
			Event Player))), 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Position Of(Players On Hero(Hero(Hanzo), Team Of(
			Event Player))) + Vector(0, 0.500, 0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Position Of(Players On Hero(Hero(Hanzo), Team Of(
			Event Player))) + Vector(0.300, 0.500, 0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Position Of(Players On Hero(Hero(Hanzo), Team Of(
			Event Player))) + Vector(-0.300, 0.500, 0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Position Of(Players On Hero(Hero(Hanzo), Team Of(
			Event Player))) + Vector(0.500, 0, 0), 3, Visible To Position and Radius);
		Start Facing(Players On Hero(Hero(Hanzo), All Teams), Direction Towards(Eye Position(Players On Hero(Hero(Hanzo), All Teams)),
			Eye Position(Event Player.enemy)), 5000, To World, Direction and Turn Rate);
		Wait(0.300, Ignore Condition);
		Destroy All Effects;
		Wait(Random Real(0.050, 0.700), Ignore Condition);
		Communicate(Players On Hero(Hero(Hanzo), Team Of(Event Player)), With You);
		Start Holding Button(Players On Hero(Hero(Hanzo), Team Of(Event Player)), Button(Primary Fire));
		Wait(0.700, Ignore Condition);
		Stop Holding Button(Players On Hero(Hero(Hanzo), Team Of(Event Player)), Button(Primary Fire));
		Wait(0.700, Ignore Condition);
		Start Forcing Throttle(Players On Hero(Hero(Hanzo), Team Of(Event Player)), 0, 0, 1, 0, 0, 0);
		Press Button(Players On Hero(Hero(Hanzo), Team Of(Event Player)), Button(Jump));
		Wait(0.060, Ignore Condition);
		Press Button(Players On Hero(Hero(Hanzo), Team Of(Event Player)), Button(Jump));
		Wait(0.200, Ignore Condition);
		disabled Play Effect(All Players(All Teams), Good Explosion, Color(Black), Position Of(Players On Hero(Hero(Hanzo), Team Of(Event Player))),
			1);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Position Of(Players On Hero(Hero(Hanzo), Team Of(
			Event Player))), 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Position Of(Players On Hero(Hero(Hanzo),
			All Teams)) + Vector(0, 0.500, 0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Position Of(Players On Hero(Hero(Hanzo),
			All Teams)) + Vector(0.300, 0.500, 0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Position Of(Players On Hero(Hero(Hanzo),
			All Teams)) + Vector(-0.300, 0.500, 0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Position Of(Players On Hero(Hero(Hanzo),
			All Teams)) + Vector(0.500, 0, 0), 3, Visible To Position and Radius);
		Wait(0.200, Ignore Condition);
		Destroy Dummy Bot(Team Of(Event Player), 1);
		Destroy All Effects;
	}
}

rule("半藏冰冻")
{
	event
	{
		Player Dealt Damage;
		All;
		Hanzo;
	}

	actions
	{
		Set Status(Victim, Null, Frozen, 1);
	}
}

rule("++ABILITY: GENJI特殊技能2:无相")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Genji);
		disabled Is Jumping(Event Player) == True;
		disabled Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Button Held(Event Player, Button(Reload)) == True;
		disabled Is In Air(Event Player) == False;
		disabled Is On Ground(Event Player) == True;
		Event Player.abilCooldown2 == 0;
		disabled Event Player.realAltitude < 1;
		Is In Air(Event Player) == True;
	}

	actions
	{
		Event Player.abilCooldown2 = 15;
		Set Slow Motion(60);
		Disallow Button(Event Player, Button(Primary Fire));
		Chase Player Variable At Rate(Event Player, abilCooldown2, 0, 1, Destination and Rate);
		Event Player.GroundStrike = Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)));
		Play Effect(All Players(All Teams), Moira Fade Disappear Effect, Color(Green), Event Player, 20);
		Play Effect(All Players(All Teams), Moira Fade Disappear Sound, Color(White), Event Player, 45);
		Wait(0.300, Ignore Condition);
		Set Slow Motion(100);
		Wait(0.100, Ignore Condition);
		Teleport(Event Player, Eye Position(Event Player.enemy) + Vector(0.500, 0.100, 0));
		Allow Button(Event Player, Button(Primary Fire));
		Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.GroundStrike)), To World);
		Press Button(Event Player, Button(Primary Fire));
		Wait(0.100, Ignore Condition);
		Play Effect(All Players(All Teams), Moira Fade Reappear Sound, Color(White), Event Player, 45);
		Play Effect(All Players(All Teams), Moira Fade Reappear Effect, Color(Green), Event Player, 20);
	}
}

rule("++ABILITY: GENJI特殊技能3 : 雾隐")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.abilCooldown3 == 0;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(Player Closest To Reticle(Event Player, All Teams)),
			Barriers Do Not Block LOS) == True;
		Hero Of(Event Player) == Hero(Genji);
		Is In Air(Event Player) == False;
		Is On Ground(Event Player) == True;
		Is Button Held(Event Player, Button(Reload)) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		disabled Is In Air(Event Player) == True;
	}

	actions
	{
		Event Player.abilCooldown3 = 8;
		Event Player.GroundStrike = Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)));
		Chase Player Variable At Rate(Event Player, abilCooldown3, 0, 1, Destination and Rate);
		Play Effect(All Players(All Teams), Explosion Sound, Color(White), All Living Players(All Teams), 100);
		Event Player.ProjectileSpeed = Eye Position(Event Player);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0, 0.500,
			0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0.300,
			0.500, 0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(-0.300,
			0.500, 0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0.500, 0,
			0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(-0.500, 0,
			0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0, -0.500,
			0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(-0.500,
			-0.500, 0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0.500,
			-0.500, 0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0.300, 0,
			0.300), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(-0.300, 0,
			0.300), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0.300, -1,
			0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(-0.300, -1,
			0), 3, Visible To Position and Radius);
		Set Invisible(Event Player, All);
		Set Status(Event Player, Null, Phased Out, 1);
		Set Move Speed(Event Player, 250);
		Wait(0.700, Ignore Condition);
		Destroy All Effects;
		Wait(0.300, Ignore Condition);
		Teleport(Event Player, Ray Cast Hit Position(Position Of(Event Player.GroundStrike), Position Of(Event Player.GroundStrike)
			+ Direction From Angles(Horizontal Facing Angle Of(Event Player.GroundStrike), 0) * -1.500, All Players(All Teams),
			Event Player.GroundStrike, True));
		Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.GroundStrike)), To World);
		Set Move Speed(Event Player, 75);
		Play Effect(All Players(All Teams), Explosion Sound, Color(White), All Living Players(All Teams), 100);
		Event Player.ProjectileSpeed = Eye Position(Event Player);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0, 0.500,
			0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0.300,
			0.500, 0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(-0.300,
			0.500, 0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0.500, 0,
			0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(-0.500, 0,
			0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0, -0.500,
			0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(-0.500,
			-0.500, 0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0.500,
			-0.500, 0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0.300, 0,
			0.300), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(-0.300, 0,
			0.300), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0.300, -1,
			0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(-0.300, -1,
			0), 3, Visible To Position and Radius);
		Set Invisible(Event Player, None);
		Wait(0.100, Ignore Condition);
		Destroy All Effects;
		Event Player.GroundStrike = 1;
	}
}

rule("---------------------------------------------------------------被动技能1--------------------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("Genji 弹反地上效果")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Damage Received(Event Player, 1);
	}
}

rule("Genji 弹反地上-执行")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Is Firing Primary(Event Player.enemy) == True;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player.enemy), Barriers Do Not Block LOS) == True;
		disabled Is Button Held(Event Player.enemy, Button(Primary Fire)) == True;
		Distance Between(Event Player, Event Player.enemy) <= 5.500;
		disabled Is Button Held(Event Player.enemy, Button(Ability 1)) == False;
		disabled Is In Air(Event Player) == False;
		disabled Event Damage == False;
		disabled Is In Air(Event Player.enemy) == False;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
		Set Status(Event Player.enemy, Null, Stunned, 1);
		Event Player.GroundStrike = Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)));
		Play Effect(All Players(All Teams), Doomfist Rising Uppercut Leap Effect, Color(White), Position Of(Event Player), 120);
		Play Effect(All Players(All Teams), Explosion Sound, Color(White), Position Of(Event Player), 80);
		disabled Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Color(White), Position Of(Event Player), 60);
		Apply Impulse(Event Player, Vector(X Component Of(Facing Direction Of(Event Player)) * -1, 0.100, Z Component Of(
			Facing Direction Of(Event Player)) * -1), 5, To World, Cancel Contrary Motion);
		Apply Impulse(Players In Slot(0, Opposite Team Of(Team Of(Event Player))), Vector(X Component Of(Facing Direction Of(
			Players In Slot(-1, Opposite Team Of(Team Of(Event Player))))) * -1, 0.100, Z Component Of(Facing Direction Of(Players In Slot(
			0, Opposite Team Of(Team Of(Event Player))))) * -1), 5, To World, Cancel Contrary Motion);
		Set Slow Motion(85);
		Wait(1, Ignore Condition);
		Set Slow Motion(100);
	}
}

rule("瞬间e")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		disabled Button(Ability 2) == True;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
		Disallow Button(Event Player, Button(Ability 2));
		disabled Set Status(Event Player, Null, Invincible, 0.350);
		Wait(1.500, Ignore Condition);
		Allow Button(Event Player, Button(Ability 2));
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("Genji 弹反空中无敌")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Distance Between(Event Player, Event Player.enemy) <= 6;
		Is Button Held(Event Player.enemy, Button(Primary Fire)) == True;
		Is In Air(Event Player.enemy) == True;
		disabled Is Using Ability 1(Event Player.enemy) == False;
		disabled Is Using Ability 2(Event Player.enemy) == False;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.enemy)), 5000, To World,
			Direction and Turn Rate);
		Apply Impulse(Event Player, Vector(0, 0, -1), 5, To Player, Cancel Contrary Motion);
		Apply Impulse(Event Player.enemy, Vector(0, 0, -1), 15, To Player, Cancel Contrary Motion);
		Set Status(Event Player.enemy, Null, Stunned, 0.700);
		Stop Facing(Event Player);
	}
}

disabled rule("Genji 弹反路霸近战")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Distance Between(Event Player, Event Player.enemy) <= 3;
		Is Button Held(Event Player.enemy, Button(Melee)) == True;
		Is In Air(Event Player.enemy) == False;
		Is In Air(Event Player) == False;
		disabled Is In Air(Event Player.enemy) == True;
		disabled Is Using Ability 1(Event Player.enemy) == False;
		disabled Is Using Ability 2(Event Player.enemy) == False;
	}

	actions
	{
		Set Status(Event Player, Null, Invincible, 0.350);
		Set Status(Event Player.enemy, Null, Stunned, 0.500);
		Event Player.GroundStrike = Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)));
		Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.GroundStrike)), To World);
		Press Button(Event Player, Button(Primary Fire));
	}
}

rule("---------------------------------------------------------------被动技能2: 金身--------------------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("金身 效果")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Using Ability 2(Event Player) == False;
		Is Firing Primary(Event Player.enemy) == False;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ashe Dynamite Burning Material Effect, Color(Green), Event Player, 10,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Baptiste Immortality Field Protected Effect, Color(White), Event Player, 50,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Zenyatta Orb of Discord Target Sound, Color(White), Position Of(Event Player), 120,
			Visible To Position and Radius);
		disabled Set Damage Received(Event Player, 1);
		Wait(1, Ignore Condition);
		Destroy All Effects;
		disabled Set Damage Received(Event Player, 100);
		Disallow Button(Event Player, Button(Melee));
		Wait(0.100, Ignore Condition);
		Allow Button(Event Player, Button(Primary Fire));
	}
}

rule("金身 伤害效果")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Firing Primary(Event Player.enemy) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		Set Damage Received(Event Player, 100);
		Wait(1, Ignore Condition);
		Set Damage Received(Event Player, 100);
	}
}

rule("金身无敌 弹飞 触发2:受到伤害")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Using Ability 1(Event Player.enemy) == True;
		disabled Distance Between(Event Player, Event Player.enemy) <= 3;
	}

	actions
	{
		Set Damage Received(Event Player, 1);
		Set Status(Event Player.enemy, Null, Knocked Down, 1.600);
		Apply Impulse(Event Player, Vector(X Component Of(Facing Direction Of(Event Player)) * -1, 0.100, Z Component Of(
			Facing Direction Of(Event Player)) * -1), 10, To World, Cancel Contrary Motion);
		Apply Impulse(Players In Slot(0, Opposite Team Of(Team Of(Event Player))), Vector(X Component Of(Facing Direction Of(
			Players In Slot(-1, Opposite Team Of(Team Of(Event Player))))) * -1, 0.100, Z Component Of(Facing Direction Of(Players In Slot(
			0, Opposite Team Of(Team Of(Event Player))))) * -1), 20, To World, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 50);
		Play Effect(All Players(All Teams), Zarya Particle Cannon Explosion Effect, Color(White), Position Of(Event Player), 1);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Players In Slot(0, Opposite Team Of(Team Of(Event Player))),
			50);
		Set Slow Motion(80);
		Wait(1, Ignore Condition);
		Set Damage Received(Event Player, 100);
		Set Slow Motion(100);
	}
}

rule("被动技能2时禁止被动技能1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Ability 2));
		Wait(1, Ignore Condition);
		Allow Button(Event Player, Button(Ability 2));
	}
}

rule("---------------------------------------------------------------其余被动技能设置--------------------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("空中伤害--击倒")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Is In Air(Victim) == True;
		Event Damage >= 40;
	}

	actions
	{
		Set Status(Event Player.enemy, Attacker, Knocked Down, Event Damage / 150);
		disabled Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player, 60);
	}
}

disabled rule("Genji取消大")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Hanzo));
		Start Forcing Player To Be Hero(Event Player, Hero(Genji));
		disabled Press Button(Event Player, Button(Melee));
		Set Ultimate Charge(Event Player, 100);
		disabled Wait(1, Ignore Condition);
		disabled Press Button(Event Player, Button(Ultimate));
	}
}

disabled rule("测试 慢动作")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Event Damage == 96;
	}

	actions
	{
		Set Slow Motion(50);
		Wait(0.250, Ignore Condition);
		Set Slow Motion(100);
	}
}

rule("测试 技能1 对撞")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Is Using Ability 1(Players In Slot(0, Opposite Team Of(Team Of(Event Player)))) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Knocked Down, 2);
		Set Status(Players In Slot(0, Opposite Team Of(Team Of(Event Player))), Null, Knocked Down, 2);
		Apply Impulse(Event Player, Vector(X Component Of(Facing Direction Of(Event Player)) * -1, 0.100, Z Component Of(
			Facing Direction Of(Event Player)) * -1), 20, To World, Cancel Contrary Motion);
		Apply Impulse(Players In Slot(0, Opposite Team Of(Team Of(Event Player))), Vector(X Component Of(Facing Direction Of(
			Players In Slot(-1, Opposite Team Of(Team Of(Event Player))))) * -1, 0.100, Z Component Of(Facing Direction Of(Players In Slot(
			0, Opposite Team Of(Team Of(Event Player))))) * -1), 20, To World, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 50);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Players In Slot(0, Opposite Team Of(Team Of(Event Player))),
			50);
		Set Slow Motion(90);
		Wait(0.700, Ignore Condition);
		Set Slow Motion(100);
	}
}

rule("--------------------------------------------------------------------------------------------------------------------------终结动画设定-----------------------------------------------------------------------------------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("------------GENJI终结动画--------------")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Genji);
		Team Score(Team Of(Event Player)) == 2;
		Event Player.finisher == 1;
	}

	actions
	{
		disabled Teleport(Event Player, Global.camPoint1);
		disabled Teleport(Event Player.enemy, Global.camPoint2);
		Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
		Clear Status(Event Player.enemy, Knocked Down);
		Set Status(Event Player.enemy, Null, Stunned, 9999);
		Create Dummy Bot(Hero(Hanzo), Team Of(Event Player), -1, Position Of(Event Player.enemy) + Vector(0, 20, 0), Direction Towards(
			Eye Position(Last Created Entity), Position Of(Event Player.enemy)));
		Start Facing(Players On Hero(Hero(Hanzo), All Teams), Direction Towards(Eye Position(Players On Hero(Hero(Hanzo), All Teams)),
			Eye Position(Event Player.enemy)), 5000, To World, Direction and Turn Rate);
		Start Camera(All Players(All Teams), Position Of(Players On Hero(Hero(Hanzo), All Teams)) + Vector(1.500, -1, 3), Position Of(
			Players On Hero(Hero(Hanzo), All Teams)), 20);
		Set Gravity(Last Created Entity, 0);
		Wait(0.450, Ignore Condition);
		Press Button(Last Created Entity, Button(Ultimate));
		Wait(1.500, Ignore Condition);
		Start Camera(All Players(All Teams), Eye Position(Event Player) + Vector(3, 0.400, 0), Position Of(Event Player.enemy), 20);
		Wait(0.800, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.enemy)), 3000, To World,
			Direction and Turn Rate);
		Wait(0.250, Ignore Condition);
		Clear Status(Event Player.enemy, Unkillable);
		Press Button(Event Player, Button(Ability 1));
		Kill(Event Player.enemy, Event Player);
		Event Player.finisher = 0;
	}
}

rule("-----------路霸  终结动画------------")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.finisher == 1;
		Hero Of(Event Player) == Hero(Roadhog);
		Team Score(Team Of(Event Player)) == 2;
	}

	actions
	{
		Set Status(Event Player.enemy, Null, Stunned, 9999);
		Event Player.activateCams = 0;
		Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
		Clear Status(Event Player.enemy, Knocked Down);
		Wait(0.500, Ignore Condition);
		Start Camera(All Players(All Teams), Eye Position(Event Player.enemy) + Facing Direction Of(Event Player.enemy) * 1, Eye Position(
			Event Player), 50);
		Set Ultimate Ability Enabled(Event Player, True);
		Set Ultimate Charge(Event Player, 100);
		Wait(0.500, Ignore Condition);
		Press Button(Event Player, Button(Ultimate));
		Wait(4, Ignore Condition);
		Clear Status(Event Player.enemy, Unkillable);
		Kill(Event Player.enemy, Event Player);
		Event Player.finisher = 0;
	}
}

rule("最后一局敌人不死-触发击杀")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Team Score(Team Of(Event Player)) == 2;
	}

	actions
	{
		Set Status(Event Player.enemy, Null, Unkillable, 9999);
	}
}

rule("敌人锁血; finisher = 1 if knocked down //处决动画")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Health(Event Player.enemy) == 1;
		Team Score(Team Of(Event Player)) == 2;
	}

	actions
	{
		Set Status(Event Player.enemy, Event Player, Knocked Down, 9999);
		Small Message(Event Player, Custom String("Damage the enemy to perform a finisher"));
		Event Player.finisher = 1;
		Set Status(Event Player.enemy, Event Player, Stunned, 9999);
		Global.gameOver = 1;
	}
}

rule("终结动画结束后 - 15 SEC AND DIE")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.finisher == 1;
	}

	actions
	{
		Wait(20, Ignore Condition);
		Kill(Event Player.enemy, Event Player);
		Destroy All Dummy Bots;
	}
}

disabled rule("测试最终动画")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player == Host Player;
	}

	actions
	{
		Set Team Score(Team 1, 4);
	}
}

rule("--------------------------------------------------------------------------------------------------------------------------机器人设定-----------------------------------------------------------------------------------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("添加机器人")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Players In Slot(0, Opposite Team Of(Team Of(Host Player))) == Null;
		Is Game In Progress == False;
		disabled Event Player == Host Player;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.practiceMatch == 0;
	}

	actions
	{
		Create Dummy Bot(Hero(Roadhog), Opposite Team Of(Team Of(Event Player)), -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Global.practiceMatch = 1;
	}
}

rule("默认平局")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player != Host Player;
		Is Dummy Bot(Event Player) == False;
		Global.practiceMatch == 1;
	}

	actions
	{
		Destroy All Dummy Bots;
		Declare Match Draw;
		Global.practiceMatch = 0;
	}
}

rule("机器人")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
		Is Dummy Bot(Event Player) == True;
		Global.practiceMatch == 1;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), Position Of(Host Player)), Random Integer(
			-1, 1), To World, Replace existing throttle, Direction and Magnitude);
		Start Facing(Players On Hero(Hero(Roadhog), All Teams), Direction Towards(Eye Position(Players On Hero(Hero(Roadhog), All Teams)),
			Eye Position(Players On Hero(Hero(Genji), All Teams))), 500, To World, Direction and Turn Rate);
		Wait(Random Real(0.250, 1), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("机器人")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
		Is Dummy Bot(Event Player) == True;
		Global.practiceMatch == 1;
		Distance Between(Position Of(Event Player), Position Of(Event Player.enemy)) <= 8;
	}

	actions
	{
		Press Button(Event Player, Button(Primary Fire));
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("指针")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.inputsArray[0] = 0;
		Global.inputsArray[1] = 1;
		Global.inputsArray[2] = 2;
		Global.inputsArray[3] = 3;
	}
}

rule("++ABILITY: 路霸技能")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
		Is Dummy Bot(Event Player) == False;
		Throttle Of(Event Player) == Vector(0, 0, -1);
		Is Crouching(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.abilCooldown1 == 0;
	}

	actions
	{
		Event Player.abilCooldown1 = 10;
		Chase Player Variable At Rate(Event Player, abilCooldown1, 0, 1, Destination and Rate);
		Create Dummy Bot(Hero(Junkrat), Team Of(Event Player), -1, Position Of(Event Player) + Vector(0, 5, 0) + Facing Direction Of(
			Event Player) * -3, Event Player.enemy);
		Play Effect(All Players(All Teams), Good Explosion, Color(Red), Position Of(Event Player) + Vector(0, 5, 0) + Facing Direction Of(
			Event Player) * -3, 1);
		Wait(0.250, Ignore Condition);
		Apply Impulse(Players On Hero(Hero(Junkrat), Team Of(Event Player)), Facing Direction Of(Event Player), 10, To World,
			Cancel Contrary Motion);
		Communicate(Players On Hero(Hero(Junkrat), Team Of(Event Player)), Hello);
		Press Button(Players On Hero(Hero(Junkrat), Team Of(Event Player)), Button(Primary Fire));
		Wait(0.500, Ignore Condition);
		Start Forcing Throttle(Players On Hero(Hero(Junkrat), Team Of(Event Player)), 0, 0, 1, 0, 0, 0);
		Press Button(Players On Hero(Hero(Junkrat), Team Of(Event Player)), Button(Jump));
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), Good Explosion, Color(Red), Position Of(Players On Hero(Hero(Junkrat), Team Of(Event Player))),
			1);
		Destroy Dummy Bot(Team Of(Event Player), 1);
	}
}

rule("机器人技能2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Health(Event Player) <= 400;
		Hero Of(Event Player) == Hero(Roadhog);
		Is Dummy Bot(Event Player) == True;
		Global.practiceMatch == 1;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("机器人近战")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
		Is Dummy Bot(Event Player) == True;
		Global.practiceMatch == 1;
		Distance Between(Position Of(Event Player), Position Of(Event Player.enemy)) <= 1.500;
	}

	actions
	{
		Press Button(Event Player, Button(Melee));
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("机器人技能1: 钩子")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
		Is Dummy Bot(Event Player) == True;
		Global.practiceMatch == 1;
		Distance Between(Position Of(Event Player), Position Of(Event Player.enemy)) >= 10;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Communicate(Event Player, Hello);
		Wait(4, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("--------------------------------------------------------------------------------------------------------------------------作废代码-----------------------------------------------------------------------------------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("MoveSet")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		disabled Create HUD Text(Event Player, Null, Null, Custom String("• Double tap in any direction to dash"), Right, 0.400, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		disabled Create HUD Text(Event Player, Null, Custom String("{0} {1}: {2}", String("Abilities"), String("Cooldown"),
			Event Player.abilCooldown1), Null, Right, 0, Color(White), Color(Aqua), Color(White), Visible To and String,
			Default Visibility);
	}
}

disabled rule("HUD 删除")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Destroy All HUD Text;
	}
}

disabled rule("左键")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		Set Slow Motion(90);
		Wait(0.100, Abort When False);
		Set Slow Motion(100);
	}
}

disabled rule("Genji 弹反半藏")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Is Button Held(Event Player.enemy, Button(Primary Fire)) == True;
		disabled Distance Between(Event Player, Event Player.enemy) > 3.500;
		disabled Is In Air(Event Player.enemy) == True;
		disabled Is Using Ability 1(Event Player.enemy) == False;
		disabled Is Using Ability 2(Event Player.enemy) == False;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Players On Hero(Hero(Hanzo), All Teams))),
			5000, To World, Direction and Turn Rate);
		disabled Apply Impulse(Event Player, Vector(0, 0, -1), 5, To Player, Cancel Contrary Motion);
		disabled Apply Impulse(Event Player.enemy, Vector(0, 0, -1), 5, To Player, Cancel Contrary Motion);
		Set Status(Players On Hero(Hero(Hanzo), All Teams), Null, Knocked Down, 0.001);
		Stop Facing(Event Player);
	}
}

rule("genji取消攻击")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		disabled Is Firing Primary(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		disabled If(Is Firing Primary(Event Player) == True);
		disabled If(Is Button Held(Event Player, Button(Primary Fire)) == True);
		If(Is Button Held(Event Player, Button(Secondary Fire)) == True);
			Wait(0.140, Ignore Condition);
			disabled Set Status(Event Player, Null, Invincible, 0.300);
			disabled Set Damage Dealt(Event Player, 0);
			Set Status(Event Player, Null, Stunned, 0.100);
			disabled Set Status(Event Player, Null, Phased Out, 0.500);
		Else;
			Abort;
	}
}

disabled rule("Genji左键对砍(需要修改)")
{
	event
	{
		Player Dealt Damage;
		All;
		Genji;
	}

	conditions
	{
		Event Damage == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Button Held(Victim, Button(Primary Fire)) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Invincible, 0.250);
		Set Status(Event Player, Null, Stunned, 0.250);
		Set Status(Event Player, Null, Invincible, 0.250);
		Set Status(Event Player, Null, Stunned, 0.250);
		Apply Impulse(Event Player, Vector(0, 0, -1), 10, To Player, Cancel Contrary Motion);
		Apply Impulse(Event Player.enemy, Vector(0, 0, -1), 10, To Player, Cancel Contrary Motion);
	}
}

disabled rule("Genji 命中效果")
{
	event
	{
		Player Dealt Damage;
		All;
		Genji;
	}

	conditions
	{
		Event Damage == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Explosion, Color(Red), Victim, 0.400);
	}
}

disabled rule("转换油门 Hanzo")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	actions
	{
		Start Transforming Throttle(Event Player, 1, 1, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(
			Event Player)) + 90, 0));
	}
}

disabled rule("转换油门 路霸")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	actions
	{
		Start Transforming Throttle(Event Player, 1, 1, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(
			Event Player)) + 90, 0));
	}
}

disabled rule("++ABILITY: Genji传送+攻击")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Genji);
		disabled Is In Air(Event Player) == True;
		disabled Event Player.realAltitude >= 1;
		disabled Is Firing Primary(Event Player) == True;
		Event Player.tempCD == 0;
		disabled Distance Between(Eye Position(Event Player), Eye Position(Event Player.enemy)) <= 5;
	}

	actions
	{
		disabled Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.enemy)), 5000, To World,
			Direction and Turn Rate);
		Chase Player Variable At Rate(Event Player, tempCD, 0, 1, Destination and Rate);
		Event Player.tempCD = 1.500;
		disabled Set Status(Victim, Null, Knocked Down, 0.500);
		Press Button(Event Player, Button(Primary Fire));
		disabled Damage(Victim, Event Player, 20);
		disabled Stop Facing(Event Player);
	}
}