settings
{
	main
	{
		Description: "Samohtaerg喜爱格斗游戏"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Max Spectators: 12
	}

	modes
	{
		Elimination
		{
			enabled maps
			{
				Ayutthaya
				Workshop Island
				Workshop Island Night
			}
		}

		General
		{
			Capture Objective Tiebreaker: Off
			Draw After Match Time Elapsed With No Tiebreaker: 300
			Hero Limit: Off
			Score To Win: 3
			Spawn Health Packs: Disabled
			Tiebreaker After Match Time Elapsed: 300
		}
	}

	heroes
	{
		General
		{
			Ability Cooldown Time: 80%
			Jump Vertical Speed: 125%

			Baptiste
			{
				Ammunition Clip Size Scalar: 25%
				Health: 150%
				Regenerative Burst: Off
				Secondary Fire: Off
			}

			Brigitte
			{
				Damage Dealt: 75%
				Healing Received: 40%
				Health: 125%
				Shield Bash Cooldown Time: 0%
				Whip Shot Cooldown Time: 130%
			}

			Doomfist
			{
				Ammunition Clip Size Scalar: 25%
				Health: 130%
				Primary Fire: Off
				Projectile Speed: 20%
				Ultimate Generation - Combat Meteor Strike: 120%
			}

			Genji
			{
				Ammunition Clip Size Scalar: 25%
				Damage Dealt: 65%
				Deflect Cooldown Time: 0%
				Health: 300%
				Infinite Ultimate Duration: On
				Movement Gravity: 85%
				Movement Speed: 70%
				No Ammunition Requirement: On
				Primary Fire: Off
				Projectile Speed: 500%
				Spawn With Ultimate Ready: On
				Swift Strike Cooldown Time: 25%
				Ultimate Duration: 25%
				Ultimate Generation - Combat Dragonblade: 500%
				Ultimate Generation - Passive Dragonblade: 500%
				Ultimate Generation Dragonblade: 500%
			}

			Hanzo
			{
				Damage Dealt: 40%
				Spawn With Ultimate Ready: On
			}

			Junkrat
			{
				Damage Dealt: 70%
			}

			Reinhardt
			{
				Barrier Field: Off
				Charge: Off
				Health: 130%
			}

			Roadhog
			{
				Ammunition Clip Size Scalar: 25%
				Damage Dealt: 50%
				Healing Received: 50%
				Movement Speed: 90%
				Projectile Speed: 90%
				Secondary Fire: Off
				Take a Breather Cooldown Time: 200%
				Ultimate Ability Whole Hog: Off
			}

			Sigma
			{
				Accretion Knockback Scalar: 80%
				Damage Dealt: 80%
				Experimental Barrier: Off
				Health: 105%
				Jump Vertical Speed: 130%
				Movement Gravity: 90%
			}

			Torbjörn
			{
				Damage Dealt: 115%
				Deploy Turret: Off
				Health: 170%
				Jump Vertical Speed: 140%
				Movement Gravity: 115%
				Movement Speed: 110%
				Weapons Enabled: Forge Hammer Only
			}

			Tracer
			{
				Spawn With Ultimate Ready: On
			}

			Winston
			{
				Damage Dealt: 80%
				Infinite Ultimate Duration: On
				Primal Rage Melee Knockback Scalar: 85%
				Spawn With Ultimate Ready: On
			}

			Wrecking Ball
			{
				Piledriver Cooldown Time: 0%
			}

			enabled heroes
			{
				Genji
			}
		}
	}

	extensions
	{
		Beam Effects
		Buff Status Effects
		Debuff Status Effects
		Buff and Debuff Sounds
		Energy Explosion Effects
		Kinetic Explosion Effects
		Explosion Sounds
		Play More Effects
	}
}

variables
{
	global:
		0: spawnA
		1: spawnB
		2: practiceMatch
		3: inputsArray
		4: camPoint1
		5: camPoint2
		6: camPoint3
		8: camPoint5
		9: camPoint4
		19: gameOver
		24: mapYfloor
		25: mapDetector

	player:
		2: realAltitude
		4: enemy
		5: activateCams
		6: abilActivator
		7: ProjectileSpeed
		9: defaultCam
		10: K
		11: L
		12: M
		13: N
		14: text3
		15: abilCooldown
		16: tempEntityEffect
		17: tempCD
		18: text1
		19: text2
		20: finisher
		21: dashLeft
		22: dashRight
		23: dashForward
		24: dashBack
		25: GroundStrike
}

rule("------------------setup---------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("globals SPAWN POINTS - AYU")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Global.mapDetector == 42;
		Current Map == Map(Ayutthaya);
	}

	actions
	{
		Global.spawnA = Vector(15, 21, 88);
		Global.spawnB = Vector(18, 21, 81);
		Global.mapYfloor = 14;
	}
}

rule("globals SPAWN POINTS - ISLAND")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Global.mapDetector == 186;
		Current Map == Map(Workshop Island);
	}

	actions
	{
		Global.spawnA = Vector(0, 0, 10);
		Global.spawnB = Vector(0, 0, -10);
		Global.mapYfloor = -10;
	}
}

rule("globals SPAWN POINTS - ISLAND晚上")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Global.mapDetector == 186;
		Current Map == Map(Workshop Island Night);
	}

	actions
	{
		Global.spawnA = Vector(0, 0, 10);
		Global.spawnB = Vector(0, 0, -10);
		Global.mapYfloor = -10;
	}
}

rule("globals SPAWN POINTS - OAS")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Global.mapDetector == 186;
		Current Map == Map(Oasis City Center);
	}

	actions
	{
		Global.spawnA = Vector(61.624, 31.943, 317.456);
		Global.spawnB = Vector(68.420, 31.943, 328.952);
		Global.mapYfloor = 26;
	}
}

rule("重要Player variables setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.I = 0.500;
		Event Player.defaultCam = 1;
		Event Player.activateCams = 1;
		Skip If(Hero Of(Event Player) != Hero(Reinhardt), 1);
		Set Ability 1 Enabled(Event Player, False);
	}
}

rule("视角相关基础设置")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Bastion);
		Hero Of(Event Player) != Hero(Soldier: 76);
		Hero Of(Event Player) != Hero(Brigitte);
		Hero Of(Event Player) != Hero(Doomfist);
		Hero Of(Event Player) != Hero(D.Va);
		Hero Of(Event Player) != Hero(Mercy);
		Hero Of(Event Player) != Hero(Moira);
		Hero Of(Event Player) != Hero(Orisa);
		Hero Of(Event Player) != Hero(Pharah);
		Hero Of(Event Player) != Hero(Reaper);
		Hero Of(Event Player) != Hero(Reinhardt);
		Hero Of(Event Player) != Hero(Roadhog);
		Hero Of(Event Player) != Hero(Symmetra);
		Hero Of(Event Player) != Hero(Winston);
		Hero Of(Event Player) != Hero(Wrecking Ball);
		Hero Of(Event Player) != Hero(Zarya);
	}

	actions
	{
		Event Player.K = -1.500;
		Event Player.L = 50;
		Event Player.M = 1.500;
		Event Player.N = 1.500;
	}
}

rule("Put enemy into a player's variable")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.enemy = Players In Slot(0, Opposite Team Of(Team Of(Event Player)));
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("-------------respawn/tp rules-------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("tp if game started. SET f = 1 to enable cams and facing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.tempEntityEffect = 0;
		Clear Status(Event Player, Burning);
		Clear Status(Event Player, Knocked Down);
		Clear Status(Event Player, Stunned);
		Skip If(Team Of(Event Player) == Team 2, 1);
		Teleport(Event Player, Global.spawnA);
		Skip If(Team Of(Event Player) == Team 1, 1);
		Teleport(Event Player, Global.spawnB);
		Event Player.activateCams = 1;
		Skip If(Hero Of(Event Player) != Hero(Winston), 1);
		Press Button(Event Player, Button(Ultimate));
		Wait(0.250, Ignore Condition);
		Skip If(Hero Of(Event Player) != Hero(Genji), 1);
		Press Button(Event Player, Button(Ultimate));
	}
}

rule("----------------cam---------------------")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("朝向 很重要Start Facing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.enemy != 0;
		Event Player.activateCams == 1;
		Is Game In Progress == True;
		Event Player.abilActivator != 1;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.enemy)), 700, To World,
			Direction and Turn Rate);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("第三人称")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Has Spawned(Event Player) == True;
		disabled Players On Hero(Hero(Genji), All Teams) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Start Camera(Event Player, Event Player + World Vector Of(Vector(-0.800, 0, 0), Event Player, Rotation)
			+ Up * Event Player.M + Facing Direction Of(Event Player) * Event Player.K,
			Event Player + Up * Event Player.N + Facing Direction Of(Event Player) * Event Player.L, 100);
		Wait(0.250, Ignore Condition);
		Abort If Condition Is False;
	}
}

disabled rule("START CAMERA FIXED close")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Event Player.enemy) <= 6;
		Event Player.enemy != 0;
		Event Player.activateCams == 1;
		Event Player.abilActivator != 1;
		Global.gameOver == 0;
		Event Player.finisher == 0;
	}

	actions
	{
		Start Camera(Event Player, Eye Position(Event Player) + Direction From Angles(Horizontal Facing Angle Of(Event Player), 0)
			* Distance Between(Eye Position(Event Player), Eye Position(Event Player.enemy)) * Event Player.I + Direction From Angles(
			Horizontal Facing Angle Of(Event Player) + -90, 0) * 4, Eye Position(Event Player) + Direction From Angles(
			Horizontal Facing Angle Of(Event Player), 0) * (Distance Between(Eye Position(Event Player), Event Player.enemy) / 2), 20);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("START CAMERA FAR")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Event Player.enemy) > 6;
		Event Player.enemy != 0;
		Event Player.activateCams == 1;
		Event Player.abilActivator != 1;
		Global.gameOver == 0;
		Event Player.finisher == 0;
	}

	actions
	{
		Start Camera(Event Player, Eye Position(Event Player) + Direction From Angles(Horizontal Facing Angle Of(Event Player), 0)
			* Distance Between(Eye Position(Event Player), Eye Position(Event Player.enemy)) * Event Player.I + Direction From Angles(
			Horizontal Facing Angle Of(Event Player) + -90, 0) * Distance Between(Eye Position(Event Player), Event Player.enemy)
			* Event Player.defaultCam, Eye Position(Event Player) + Direction From Angles(Horizontal Facing Angle Of(Event Player), 0) * (
			Distance Between(Eye Position(Event Player), Event Player.enemy) / 2), 20);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("EMERGENCY RESET CAMERA/FACING")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Stop Camera(Event Player);
		Stop Facing(Event Player);
		Start Camera(Event Player, Eye Position(Event Player) + Direction From Angles(Horizontal Facing Angle Of(Event Player), 0)
			* Distance Between(Eye Position(Event Player), Eye Position(Event Player.enemy)) * Event Player.I + Direction From Angles(
			Horizontal Facing Angle Of(Event Player) + -90, 0) * Distance Between(Eye Position(Event Player), Event Player.enemy)
			* Event Player.defaultCam, Eye Position(Event Player) + Direction From Angles(Horizontal Facing Angle Of(Event Player), 0) * (
			Distance Between(Eye Position(Event Player), Event Player.enemy) / 2), 10);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.enemy)), 700, To World,
			Direction and Turn Rate);
	}
}

rule("KILL IF FELL BELOW mapYfloor")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Y Component Of(Position Of(Event Player)) < Global.mapYfloor) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Damage(Event Player, Null, 3);
		Wait(0.020, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("减少集结时间")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(0);
	}
}

disabled rule("转换油门 Hanzo")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	actions
	{
		Start Transforming Throttle(Event Player, 1, 1, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(
			Event Player)) + 90, 0));
	}
}

disabled rule("转换油门 路霸")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	actions
	{
		Start Transforming Throttle(Event Player, 1, 1, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(
			Event Player)) + 90, 0));
	}
}

rule("Status Rooted")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Set Status(Event Player, Null, Rooted, 1);
	}
}

rule("最后一局敌人不死-触发击杀")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Team Score(Team Of(Event Player)) == 2;
	}

	actions
	{
		Set Status(Event Player.enemy, Null, Unkillable, 9999);
	}
}

rule("敌人锁血; finisher = 1 if knocked down //处决动画")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Health(Event Player.enemy) == 1;
		Team Score(Team Of(Event Player)) == 2;
	}

	actions
	{
		Set Status(Event Player.enemy, Event Player, Knocked Down, 9999);
		Small Message(Event Player, Custom String("Damage the enemy to perform a finisher"));
		Event Player.finisher = 1;
		Set Status(Event Player.enemy, Event Player, Stunned, 9999);
		Global.gameOver = 1;
	}
}

rule("CAMERA POINTS")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		disabled Global.camPoint1 = Vector(17.165, 22.500, 82.089);
		disabled Global.camPoint2 = Vector(17.035, 22.500, 75.659);
		disabled Global.camPoint3 = Vector(20, 30, 75);
		disabled Global.camPoint4 = Vector(17.165, 22.500, 70);
		disabled Global.camPoint5 = Vector(17.370, 22.199, 50.468);
		Global.camPoint1 = Global.spawnA + Vector(0, 0.300, 7);
		Global.camPoint2 = Global.spawnA + Vector(0, 0.300, 0);
		Global.camPoint3 = Global.spawnA + Vector(3, 8, 0);
		Global.camPoint4 = Global.spawnA + Vector(0, 0.300, -5);
		Global.camPoint5 = Global.spawnA + Vector(0, 0.300, -20);
	}
}

disabled rule("--DASH LEFT START; V")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(1, 0, 0);
		Event Player.dashLeft == 0;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Event Player.dashLeft = 1;
		Wait(0.400, Ignore Condition);
		Event Player.dashLeft = 4;
		Wait(0.500, Ignore Condition);
		Event Player.dashLeft = 0;
	}
}

disabled rule("--DASH LEFT STOP")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(0, 0, 0);
		Event Player.dashLeft == 1;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Event Player.dashLeft = 2;
	}
}

disabled rule("--DASH LEFT CONFIRM")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(1, 0, 0);
		Event Player.dashLeft == 2;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		disabled Set Status(Event Player, Null, Rooted, 0.001);
		Apply Impulse(Event Player, Vector(1, 0, 0), 175, To Player, Cancel Contrary Motion);
		Set Status(Event Player, Null, Rooted, 0.200);
		Event Player.dashLeft = 4;
	}
}

disabled rule("--DASH RIGHT START; W")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(-1, 0, 0);
		Event Player.dashRight == 0;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Event Player.dashRight = 1;
		Wait(0.400, Ignore Condition);
		Event Player.dashRight = 4;
		Wait(0.500, Ignore Condition);
		Event Player.dashRight = 0;
	}
}

disabled rule("--DASH RIGHT STOP")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(0, 0, 0);
		Event Player.dashRight == 1;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Event Player.dashRight = 2;
	}
}

disabled rule("--DASH RIGHT CONFIRM")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(-1, 0, 0);
		Event Player.dashRight == 2;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		disabled Set Status(Event Player, Null, Rooted, 0.001);
		Apply Impulse(Event Player, Vector(-1, 0, 0), 150, To Player, Cancel Contrary Motion);
		Set Status(Event Player, Null, Rooted, 0.200);
		Event Player.dashRight = 4;
	}
}

disabled rule("--DASH FORWARD START; X")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(0, 0, 1);
		Event Player.dashForward == 0;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Event Player.dashForward = 1;
		Wait(0.400, Ignore Condition);
		Event Player.dashForward = 4;
		Wait(0.500, Ignore Condition);
		Event Player.dashForward = 0;
	}
}

disabled rule("--DASH FORWARD STOP")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(0, 0, 0);
		Event Player.dashForward == 1;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Event Player.dashForward = 2;
	}
}

disabled rule("--DASH FORWARD CONFIRM + SPEED BOOST")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(0, 0, 1);
		Event Player.dashForward == 2;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Vector(0, 0, 1), 120, To Player, Cancel Contrary Motion);
		Event Player.dashForward = 4;
		Set Move Speed(Event Player, 120);
	}
}

disabled rule("--DASH BACK START; Y")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(0, 0, -1);
		Event Player.dashBack == 0;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Event Player.dashBack = 1;
		Wait(0.400, Ignore Condition);
		Event Player.dashBack = 4;
		Wait(0.500, Ignore Condition);
		Event Player.dashBack = 0;
	}
}

disabled rule("--DASH BACK STOP")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(0, 0, 0);
		Event Player.dashBack == 1;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Event Player.dashBack = 2;
	}
}

disabled rule("--DASH BACK CONFIRM")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(0, 0, -1);
		Event Player.dashBack == 2;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		disabled Set Status(Event Player, Null, Rooted, 0.001);
		Apply Impulse(Event Player, Vector(0, 0, -1), 150, To Player, Cancel Contrary Motion);
		Set Status(Event Player, Null, Rooted, 0.200);
		Event Player.dashBack = 4;
	}
}

disabled rule("瞬间下落Y")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(0, 0, -1);
		Event Player.dashBack == 0;
		Is In Air(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Event Player.dashBack = 1;
		Wait(0.400, Ignore Condition);
		Event Player.dashBack = 4;
		Wait(0.500, Ignore Condition);
		Event Player.dashBack = 0;
	}
}

disabled rule("瞬间下落 STOP")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(0, 0, 0);
		Event Player.dashBack == 1;
		Is In Air(Event Player) == True;
	}

	actions
	{
		Event Player.dashBack = 2;
	}
}

disabled rule("瞬间下落-执行")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(0, 0, -1);
		Event Player.dashBack == 2;
		Is In Air(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Vector(0, -1, 0), 165, To Player, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Lime Green), Event Player, 1);
		Event Player.dashBack = 4;
	}
}

rule("简易左突进")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(1, 0, 0);
		Is On Ground(Event Player) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		disabled Set Status(Event Player, Null, Rooted, 0.001);
		Apply Impulse(Event Player, Vector(1, 0, 0), 200, To Player, Cancel Contrary Motion);
		Set Status(Event Player, Null, Rooted, 0.250);
		Wait(1, Ignore Condition);
		disabled Event Player.dashRight = 4;
		disabled Play Effect(All Players(All Teams), Good Pickup Effect, Color(Lime Green), Event Player, 30);
	}
}

rule("简易右突进")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(-1, 0, 0);
		Is On Ground(Event Player) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		disabled Set Status(Event Player, Null, Rooted, 0.001);
		Apply Impulse(Event Player, Vector(-1, 0, 0), 200, To Player, Cancel Contrary Motion);
		Set Status(Event Player, Null, Rooted, 0.250);
		Wait(1, Ignore Condition);
		disabled Event Player.dashRight = 4;
		disabled Play Effect(All Players(All Teams), Good Pickup Effect, Color(Lime Green), Event Player, 30);
	}
}

rule("简易前突进")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(0, 0, 1);
		Is On Ground(Event Player) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		disabled Set Status(Event Player, Null, Rooted, 0.001);
		Apply Impulse(Event Player, Vector(0, 0, 1), 200, To Player, Cancel Contrary Motion);
		Set Status(Event Player, Null, Rooted, 0.250);
		Wait(1, Ignore Condition);
		disabled Event Player.dashRight = 4;
		Set Move Speed(Event Player, 120);
		disabled Play Effect(All Players(All Teams), Good Pickup Effect, Color(Lime Green), Event Player, 30);
	}
}

rule("--停止加速")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) != Vector(0, 0, 1);
	}

	actions
	{
		Set Move Speed(Event Player, 100);
	}
}

rule("简易后突进")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(0, 0, -1);
		Is On Ground(Event Player) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		disabled Set Status(Event Player, Null, Rooted, 0.001);
		Apply Impulse(Event Player, Vector(0, 0, -1), 200, To Player, Cancel Contrary Motion);
		Set Status(Event Player, Null, Rooted, 0.250);
		Wait(1, Ignore Condition);
		disabled Event Player.dashRight = 4;
		Set Move Speed(Event Player, 120);
		disabled Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Lime Green), Event Player, 30);
	}
}

rule("瞬间下落-简易")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Throttle Of(Event Player) == Vector(0, 0, -1);
		disabled Event Player.dashBack == 2;
		Is In Air(Event Player) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Button Held(Event Player, Button(Reload)) == False;
		Is On Ground(Event Player) == False;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Vector(0, -1, 0), 200, To Player, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Lime Green), Event Player, 1);
		disabled Event Player.dashBack = 4;
		disabled Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player, 20);
	}
}

rule("空中伤害--击倒")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Is In Air(Victim) == True;
		Event Damage >= 40;
	}

	actions
	{
		Set Status(Event Player.enemy, Attacker, Knocked Down, Event Damage / 50);
		disabled Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player, 60);
	}
}

rule("终结动画结束后 - 15 SEC AND DIE")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.finisher == 1;
	}

	actions
	{
		Wait(20, Ignore Condition);
		Kill(Event Player.enemy, Event Player);
		Destroy All Dummy Bots;
	}
}

rule("++ABILITY: Genji特殊招式1:半藏")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Genji);
		Is Dummy Bot(Event Player) == False;
		disabled Throttle Of(Event Player) == Vector(0, 0, -1);
		disabled Is Jumping(Event Player) == True;
		Is In Air(Event Player) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Button Held(Event Player, Button(Reload)) == True;
		Event Player.abilCooldown == 0;
	}

	actions
	{
		Event Player.abilCooldown = 1;
		Chase Player Variable At Rate(Event Player, abilCooldown, 0, 1, Destination and Rate);
		Create Dummy Bot(Hero(Hanzo), Team Of(Event Player), -1, Position Of(Event Player) + Facing Direction Of(Event Player) * -2,
			Event Player.enemy);
		Start Facing(Players On Hero(Hero(Hanzo), All Teams), Direction Towards(Eye Position(Players On Hero(Hero(Hanzo), All Teams)),
			Eye Position(Event Player.enemy)), 5000, To World, Direction and Turn Rate);
		Wait(Random Real(0.250, 1), Ignore Condition);
		Wait(0.250, Ignore Condition);
		Communicate(Players On Hero(Hero(Hanzo), Team Of(Event Player)), Ready);
		Start Holding Button(Players On Hero(Hero(Hanzo), Team Of(Event Player)), Button(Primary Fire));
		Wait(0.700, Ignore Condition);
		Stop Holding Button(Players On Hero(Hero(Hanzo), Team Of(Event Player)), Button(Primary Fire));
		Set Status(Event Player.enemy, Null, Frozen, 0.750);
		Wait(0.700, Ignore Condition);
		Start Forcing Throttle(Players On Hero(Hero(Hanzo), Team Of(Event Player)), 0, 0, 1, 0, 0, 0);
		Press Button(Players On Hero(Hero(Hanzo), Team Of(Event Player)), Button(Jump));
		Wait(0.100, Ignore Condition);
		Press Button(Players On Hero(Hero(Hanzo), Team Of(Event Player)), Button(Jump));
		Wait(0.200, Ignore Condition);
		Play Effect(All Players(All Teams), Good Explosion, Color(Black), Position Of(Players On Hero(Hero(Hanzo), Team Of(Event Player))),
			1);
		Destroy Dummy Bot(Team Of(Event Player), 1);
	}
}

rule("++ABILITY: GENJI特殊技能2：瞬移(空中)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Throttle Of(Event Player) == Vector(0, 0, 1);
		Hero Of(Event Player) == Hero(Genji);
		disabled Is Jumping(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Button Held(Event Player, Button(Reload)) == True;
		Is In Air(Event Player) == True;
		Event Player.abilCooldown == 0;
	}

	actions
	{
		Event Player.abilCooldown = 1;
		Chase Player Variable At Rate(Event Player, abilCooldown, 0, 1, Destination and Rate);
		Play Effect(All Players(All Teams), Moira Fade Disappear Effect, Color(Green), Event Player, 20);
		Play Effect(All Players(All Teams), Moira Fade Disappear Sound, Color(White), Event Player, 45);
		Wait(0.100, Ignore Condition);
		Teleport(Event Player, Eye Position(Event Player.enemy) + Vector(0, 0, 3));
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.enemy)), 3000, To World,
			Direction and Turn Rate);
		Wait(0.100, Ignore Condition);
		Play Effect(All Players(All Teams), Moira Fade Reappear Sound, Color(White), Event Player, 45);
		Play Effect(All Players(All Teams), Moira Fade Reappear Effect, Color(Green), Event Player, 20);
		Stop Facing(Event Player);
	}
}

rule("++ABILITY: GENJI特殊技能2：瞬移(地面)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Throttle Of(Event Player) == Vector(0, -1, 0);
		Hero Of(Event Player) == Hero(Genji);
		disabled Is Jumping(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.abilCooldown == 0;
		Is Button Held(Event Player, Button(Reload)) == True;
		Is In Air(Event Player) != True;
	}

	actions
	{
		disabled Event Player.GroundStrike = True;
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.enemy)), 2000, To World,
			Direction and Turn Rate);
		Event Player.abilCooldown = 1;
		Play Effect(All Players(All Teams), Explosion Sound, Color(White), All Living Players(All Teams), 100);
		Chase Player Variable At Rate(Event Player, abilCooldown, 0, 1, Destination and Rate);
		Event Player.ProjectileSpeed = Eye Position(Event Player);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0, 0.500,
			0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0.300,
			0.500, 0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(-0.300,
			0.500, 0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0.500, 0,
			0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(-0.500, 0,
			0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0, -0.500,
			0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(-0.500,
			-0.500, 0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0.500,
			-0.500, 0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0.300, 0,
			0.300), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(-0.300, 0,
			0.300), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(0.300, -1,
			0), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Color(Green), Event Player.ProjectileSpeed + Vector(-0.300, -1,
			0), 3, Visible To Position and Radius);
		Wait(0.150, Ignore Condition);
		Teleport(Event Player, Eye Position(Event Player.enemy) + Vector(0, 0, 3));
		Wait(0.100, Ignore Condition);
		Stop Facing(Event Player);
		Destroy All Effects;
	}
}

rule("++ABILITY: Genji传送+攻击")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Genji);
		disabled Is In Air(Event Player) == True;
		Event Player.realAltitude >= 1;
		Is Firing Primary(Event Player) == True;
		Event Player.tempCD == 0;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.enemy)), 2000, To World,
			Direction and Turn Rate);
		Event Player.tempCD = 1.500;
		disabled Set Status(Victim, Null, Knocked Down, 0.500);
		Damage(Victim, Event Player, 20);
		Chase Player Variable At Rate(Event Player, tempCD, 0, 1, Destination and Rate);
		Stop Facing(Event Player);
	}
}

rule("Genji 弹反地上")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Distance Between(Event Player, Event Player.enemy) <= 3.500;
		Is Button Held(Event Player.enemy, Button(Primary Fire)) == True;
		Is In Air(Event Player) == False;
		Is In Air(Event Player.enemy) == False;
		disabled Event Damage == False;
	}

	actions
	{
		Apply Impulse(Event Player, Vector(0, 0, -1), 5, To Player, Cancel Contrary Motion);
		Apply Impulse(Event Player.enemy, Vector(0, 0, -1), 10, To Player, Cancel Contrary Motion);
		Set Status(Event Player.enemy, Null, Knocked Down, 1.700);
	}
}

rule("Genji 弹反空中无敌")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Distance Between(Event Player, Event Player.enemy) <= 3.500;
		Is Button Held(Event Player.enemy, Button(Primary Fire)) == True;
		Is In Air(Event Player.enemy) == True;
		disabled Is Using Ability 1(Event Player.enemy) == False;
		disabled Is Using Ability 2(Event Player.enemy) == False;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.enemy)), 5000, To World,
			Direction and Turn Rate);
		Apply Impulse(Event Player, Vector(0, 0, -1), 5, To Player, Cancel Contrary Motion);
		Apply Impulse(Event Player.enemy, Vector(0, 0, -1), 5, To Player, Cancel Contrary Motion);
		Set Status(Event Player.enemy, Null, Knocked Down, 1.700);
		Stop Facing(Event Player);
	}
}

rule("Genji 弹反半藏")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Is Button Held(Event Player.enemy, Button(Primary Fire)) == True;
		disabled Distance Between(Event Player, Event Player.enemy) > 3.500;
		disabled Is In Air(Event Player.enemy) == True;
		disabled Is Using Ability 1(Event Player.enemy) == False;
		disabled Is Using Ability 2(Event Player.enemy) == False;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Players On Hero(Hero(Hanzo), All Teams))),
			5000, To World, Direction and Turn Rate);
		disabled Apply Impulse(Event Player, Vector(0, 0, -1), 5, To Player, Cancel Contrary Motion);
		disabled Apply Impulse(Event Player.enemy, Vector(0, 0, -1), 5, To Player, Cancel Contrary Motion);
		Set Status(Players On Hero(Hero(Hanzo), All Teams), Null, Knocked Down, 0.001);
		Stop Facing(Event Player);
	}
}

rule("瞬E")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		disabled Button(Ability 2) == True;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
		disabled Set Status(Event Player, Null, Invincible, 0.350);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("Genji 刀砍硬直")
{
	event
	{
		Player Dealt Damage;
		All;
		Genji;
	}

	conditions
	{
		Event Damage >= 1;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Set Status(Event Player.enemy, Null, Stunned, 0.100);
	}
}

disabled rule("genji取消攻击")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Using Ultimate(Event Player) == True;
		disabled Is On Ground(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Stunned, 0.250);
		Apply Impulse(Event Player, Up, 10, To World, Cancel Contrary Motion);
		disabled Wait(0.250, Ignore Condition);
		Apply Impulse(Event Player, Backward, 15, To Player, Cancel Contrary Motion);
	}
}

disabled rule("Genji取消大")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		disabled Set Status(Event Player, Null, Knocked Down, 0.001);
		disabled Set Status(Event Player, Null, Rooted, 0.001);
		disabled Apply Impulse(Event Player, Vector(0, 0, -1), 15, To Player, Cancel Contrary Motion);
		disabled Set Status(Event Player, Null, Stunned, 0.500);
		disabled Heal(Event Player.enemy, Null, 28);
		disabled Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player, 60);
		Start Forcing Player To Be Hero(Event Player, Hero(Hanzo));
		disabled Wait(0, Ignore Condition);
		Start Forcing Player To Be Hero(Players On Hero(Hero(Hanzo), All Teams), Hero(Genji));
		Press Button(Event Player, Button(Melee));
		Set Ultimate Charge(Event Player, 100);
		Wait(3, Ignore Condition);
		Press Button(Event Player, Button(Ultimate));
	}
}

disabled rule("genji取消shift")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Rooted, 0.001);
		Apply Impulse(Event Player, Vector(0, 0, -1), 225, To Player, Cancel Contrary Motion);
		Wait(0.017, Ignore Condition);
		Play Effect(All Players(All Teams), Good Explosion, Color(White), Event Player, 1);
		Set Status(Event Player, Null, Invincible, 0.001);
	}
}

disabled rule("Genji弹反Melee")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Is Button Held(Event Player.enemy, Button(Melee)) == True;
		Distance Between(Event Player, Event Player.enemy) <= 2.500;
		Event Damage == False;
	}

	actions
	{
		Set Status(Event Player.enemy, Null, Stunned, 5.500);
		Apply Impulse(Event Player, Vector(0, 0, -1), 20, To Player, Cancel Contrary Motion);
		Apply Impulse(Event Player.enemy, Vector(0, 0, -1), 35, To Player, Cancel Contrary Motion);
	}
}

disabled rule("Genji左键对砍(需要修改)")
{
	event
	{
		Player Dealt Damage;
		All;
		Genji;
	}

	conditions
	{
		Event Damage == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Button Held(Victim, Button(Primary Fire)) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Invincible, 0.250);
		Set Status(Event Player, Null, Stunned, 0.250);
		Set Status(Event Player, Null, Invincible, 0.250);
		Set Status(Event Player, Null, Stunned, 0.250);
		Apply Impulse(Event Player, Vector(0, 0, -1), 10, To Player, Cancel Contrary Motion);
		Apply Impulse(Event Player.enemy, Vector(0, 0, -1), 10, To Player, Cancel Contrary Motion);
	}
}

disabled rule("Genji 命中效果")
{
	event
	{
		Player Dealt Damage;
		All;
		Genji;
	}

	conditions
	{
		Event Damage == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Explosion, Color(Red), Victim, 0.400);
	}
}

rule("Genji 动作介绍")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Genji);
		Is Game In Progress == True;
		disabled Is Button Held(Event Player, Button(Melee)) == False;
	}

	actions
	{
		disabled Destroy All HUD Text;
		Create HUD Text(Event Player, Null, Null, Custom String("{0} + {1} + {2} = 特殊技能1", Custom String("跳跃"), Custom String("换弹"),
			Input Binding String(Button(Primary Fire))), Right, 0.100, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("{0} + {1} + {2} = 特殊技能2", Custom String("跳跃"), Custom String("换弹"),
			Input Binding String(Button(Secondary Fire))), Right, 0.100, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Event Player.text1 = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("双击任意方向键向该方向突进"), Right, 0.400, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		disabled Create HUD Text(Event Player, Null, Custom String("{0} {1}: {2}", String("Abilities"), String("Cooldown"),
			Event Player.abilCooldown), Null, Right, 0, Color(White), Color(Blue), Color(White), Visible To and String,
			Default Visibility);
	}
}

rule("Disable Brig Right click and bash")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Brigitte);
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Secondary Fire Enabled(Event Player, False);
	}
}

rule("Enable if not Brig")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Brigitte);
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Secondary Fire Enabled(Event Player, True);
	}
}

rule("对手数量不足")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Players In Slot(0, Opposite Team Of(Team Of(Event Player))) == Null;
		Is Waiting For Players == True;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("至少需要2名玩家。按{0} 加入一个机器人", Input Binding String(Button(Interact))));
		Wait(3, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Genji初始设置")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Genji);
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, False);
		Wait(1, Ignore Condition);
		Set Primary Fire Enabled(Event Player, True);
	}
}

rule("------------GENJI终结动画--------------")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Genji);
		Team Score(Team Of(Event Player)) == 2;
		Event Player.finisher == 1;
	}

	actions
	{
		disabled Teleport(Event Player, Global.camPoint1);
		disabled Teleport(Event Player.enemy, Global.camPoint2);
		Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
		Clear Status(Event Player.enemy, Knocked Down);
		Set Status(Event Player.enemy, Null, Stunned, 9999);
		Create Dummy Bot(Hero(Hanzo), Team Of(Event Player), -1, Position Of(Event Player.enemy) + Vector(0, 20, 0), Direction Towards(
			Eye Position(Last Created Entity), Position Of(Event Player.enemy)));
		Start Facing(Players On Hero(Hero(Hanzo), All Teams), Direction Towards(Eye Position(Players On Hero(Hero(Hanzo), All Teams)),
			Eye Position(Event Player.enemy)), 5000, To World, Direction and Turn Rate);
		Start Camera(All Players(All Teams), Position Of(Players On Hero(Hero(Hanzo), All Teams)) + Vector(1.500, -1, 3), Position Of(
			Players On Hero(Hero(Hanzo), All Teams)), 20);
		Set Gravity(Last Created Entity, 0);
		Wait(0.450, Ignore Condition);
		Press Button(Last Created Entity, Button(Ultimate));
		Wait(1.500, Ignore Condition);
		Start Camera(All Players(All Teams), Eye Position(Event Player) + Vector(3, 0.400, 0), Position Of(Event Player.enemy), 20);
		Wait(0.650, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.enemy)), 3000, To World,
			Direction and Turn Rate);
		Wait(0.250, Ignore Condition);
		Clear Status(Event Player.enemy, Unkillable);
		Press Button(Event Player, Button(Ability 1));
		Kill(Event Player.enemy, Event Player);
		Event Player.finisher = 0;
	}
}

rule("-----------HOG finisher---------------")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.finisher == 1;
		Hero Of(Event Player) == Hero(Roadhog);
		Team Score(Team Of(Event Player)) == 2;
	}

	actions
	{
		Set Status(Event Player.enemy, Null, Stunned, 9999);
		Event Player.activateCams = 0;
		Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
		Clear Status(Event Player.enemy, Knocked Down);
		Wait(0.500, Ignore Condition);
		Start Camera(All Players(All Teams), Eye Position(Event Player.enemy) + Facing Direction Of(Event Player.enemy) * 1, Eye Position(
			Event Player), 50);
		Set Ultimate Ability Enabled(Event Player, True);
		Set Ultimate Charge(Event Player, 100);
		Wait(0.500, Ignore Condition);
		Press Button(Event Player, Button(Ultimate));
		Wait(4, Ignore Condition);
		Clear Status(Event Player.enemy, Unkillable);
		Kill(Event Player.enemy, Event Player);
		Event Player.finisher = 0;
	}
}

disabled rule("debug")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player == Host Player;
	}

	actions
	{
		Set Team Score(Team 1, 4);
	}
}

rule("++ABILITY: Hog Brothers in arms")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
		Is Dummy Bot(Event Player) == False;
		Throttle Of(Event Player) == Vector(0, 0, -1);
		Is Crouching(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.abilCooldown == 0;
	}

	actions
	{
		Event Player.abilCooldown = 10;
		Chase Player Variable At Rate(Event Player, abilCooldown, 0, 1, Destination and Rate);
		Create Dummy Bot(Hero(Junkrat), Team Of(Event Player), -1, Position Of(Event Player) + Vector(0, 5, 0) + Facing Direction Of(
			Event Player) * -3, Event Player.enemy);
		Play Effect(All Players(All Teams), Good Explosion, Color(Red), Position Of(Event Player) + Vector(0, 5, 0) + Facing Direction Of(
			Event Player) * -3, 1);
		Wait(0.250, Ignore Condition);
		Apply Impulse(Players On Hero(Hero(Junkrat), Team Of(Event Player)), Facing Direction Of(Event Player), 10, To World,
			Cancel Contrary Motion);
		Communicate(Players On Hero(Hero(Junkrat), Team Of(Event Player)), Hello);
		Press Button(Players On Hero(Hero(Junkrat), Team Of(Event Player)), Button(Primary Fire));
		Wait(0.500, Ignore Condition);
		Start Forcing Throttle(Players On Hero(Hero(Junkrat), Team Of(Event Player)), 0, 0, 1, 0, 0, 0);
		Press Button(Players On Hero(Hero(Junkrat), Team Of(Event Player)), Button(Jump));
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), Good Explosion, Color(Red), Position Of(Players On Hero(Hero(Junkrat), Team Of(Event Player))),
			1);
		Destroy Dummy Bot(Team Of(Event Player), 1);
	}
}

rule("MoveSet")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		disabled Create HUD Text(Event Player, Null, Null, Custom String("• Double tap in any direction to dash"), Right, 0.400, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		disabled Create HUD Text(Event Player, Null, Custom String("{0} {1}: {2}", String("Abilities"), String("Cooldown"),
			Event Player.abilCooldown), Null, Right, 0, Color(White), Color(Aqua), Color(White), Visible To and String,
			Default Visibility);
	}
}

rule("MoveSet Torb")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Torbjörn);
		Is Game In Progress == True;
	}

	actions
	{
		disabled Destroy All HUD Text;
		disabled Event Player.text1 = Custom String("• Left + Jump + LMB = Unexpected dwarf");
		disabled Event Player.text3 = Custom String(" • Bang em on the head for more damage");
		Create HUD Text(Event Player, Null, Null, Custom String("{0} + {1} + {2} = Unexpected Dwarf", Icon String(Arrow: Left),
			Input Binding String(Button(Jump)), Input Binding String(Button(Primary Fire))), Right, 0.100, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.text1 = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("• Bang em on the head"), Right, 0.100, Color(White), Color(White), Color(
			White), Visible To and String, Default Visibility);
		Event Player.text2 = Last Text ID;
		disabled Create HUD Text(Event Player, Null, Null, Custom String("• Double tap in any direction to dash"), Right, 0.400, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		disabled Create HUD Text(Event Player, Null, Custom String("{0} {1}: {2}", String("Abilities"), String("Cooldown"),
			Event Player.abilCooldown), Null, Right, 0, Color(White), Color(Aqua), Color(White), Visible To and String,
			Default Visibility);
	}
}

rule("MoveSet Hog")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
		Is Game In Progress == True;
	}

	actions
	{
		disabled Destroy All HUD Text;
		disabled Event Player.text1 = Custom String("• Left + Crouch + LMB = Gday");
		disabled Event Player.text2 = Custom String(" ");
		disabled Event Player.text3 = Custom String(" ");
		Create HUD Text(Event Player, Null, Null, Custom String("{0} + {1} + {2} = Gday", Icon String(Arrow: Left), Input Binding String(
			Button(Crouch)), Input Binding String(Button(Primary Fire))), Right, 0.100, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Event Player.text1 = Last Text ID;
		disabled Create HUD Text(Event Player, Null, Null, Custom String("• Double tap in any direction to dash"), Right, 0.400, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		disabled Create HUD Text(Event Player, Null, Custom String("{0} {1}: {2}", String("Abilities"), String("Cooldown"),
			Event Player.abilCooldown), Null, Right, 0, Color(White), Color(Aqua), Color(White), Visible To and String,
			Default Visibility);
	}
}

rule("HUD 删除")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == False;
	}

	actions
	{
		Destroy All HUD Text;
	}
}

rule("Genji高度")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.realAltitude = Distance Between(Position Of(Event Player), Ray Cast Hit Position(Position Of(Event Player),
			Position Of(Event Player) + Vector(0, -10, 0), Null, All Players(All Teams), False));
		Wait(0.016, Ignore Condition);
		Loop;
	}
}

rule("Add dummy if no enemy player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Players In Slot(0, Opposite Team Of(Team Of(Host Player))) == Null;
		Is Game In Progress == False;
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.practiceMatch == 0;
	}

	actions
	{
		Create Dummy Bot(Hero(Roadhog), Opposite Team Of(Team Of(Event Player)), -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Global.practiceMatch = 1;
	}
}

rule("WinHostIfJoined")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player != Host Player;
		Is Dummy Bot(Event Player) == False;
		Global.practiceMatch == 1;
	}

	actions
	{
		Destroy All Dummy Bots;
		Declare Match Draw;
		Global.practiceMatch = 0;
	}
}

rule("-----------PRACTICE BOT AI WALK---------------")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
		Is Dummy Bot(Event Player) == True;
		Global.practiceMatch == 1;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), Position Of(Host Player)), Random Integer(
			-1, 1), To World, Replace existing throttle, Direction and Magnitude);
		Start Facing(Players On Hero(Hero(Roadhog), All Teams), Direction Towards(Eye Position(Players On Hero(Hero(Roadhog), All Teams)),
			Eye Position(Players On Hero(Hero(Genji), All Teams))), 500, To World, Direction and Turn Rate);
		Wait(Random Real(0.250, 1), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Practice Bot Primary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
		Is Dummy Bot(Event Player) == True;
		Global.practiceMatch == 1;
		Distance Between(Position Of(Event Player), Position Of(Event Player.enemy)) <= 8;
	}

	actions
	{
		Press Button(Event Player, Button(Primary Fire));
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("InputsArray")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.inputsArray[0] = 0;
		Global.inputsArray[1] = 1;
		Global.inputsArray[2] = 2;
		Global.inputsArray[3] = 3;
	}
}

rule("Practice Bot Heal")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Health(Event Player) <= 400;
		Hero Of(Event Player) == Hero(Roadhog);
		Is Dummy Bot(Event Player) == True;
		Global.practiceMatch == 1;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("Practice Bot Melee")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
		Is Dummy Bot(Event Player) == True;
		Global.practiceMatch == 1;
		Distance Between(Position Of(Event Player), Position Of(Event Player.enemy)) <= 1.500;
	}

	actions
	{
		Press Button(Event Player, Button(Melee));
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Practice Bot Hook")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
		Is Dummy Bot(Event Player) == True;
		Global.practiceMatch == 1;
		Distance Between(Position Of(Event Player), Position Of(Event Player.enemy)) >= 10;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Communicate(Event Player, Hello);
		Wait(4, Ignore Condition);
		Loop If Condition Is True;
	}
}