settings
{
	main
	{
		Description: "CONTROLS D.VA: Jump to ascend slightly and move in the direction you are facing. (YOU WILL NOT DESCEND BY LOOKING DOWN. YOU DESCEND AUTOMATICALLY.) Third Person Disable Upon Switching from Genji: Interact Key."
	}

	lobby
	{
		Match Voice Chat: Enabled
		Max Spectators: 4
	}

	modes
	{
		disabled Assault
		{
			Competitive Rules: On
		}

		disabled Control
		{
			Competitive Rules: On
			Limit Valid Control Points: Second
		}

		Team Deathmatch
		{
			Mercy Resurrect Counteracts Kills: Off
			Score To Win: 40
			Self Initiated Respawn: Off

			enabled maps
			{
				Workshop Chamber
			}
		}

		General
		{
			Game Mode Start: Immediately
			Hero Limit: Off
			Respawn Time Scalar: 65%
		}
	}

	heroes
	{
		General
		{
			Ana
			{
				Sleep Dart: Off
			}

			Ashe
			{
				Ammunition Clip Size Scalar: 500%
				Coach Gun: Off
				Dynamite: Off
				No Ammunition Requirement: On
				No Scope: On
				Projectile Speed: 500%
			}

			Bastion
			{
				Ammunition Clip Size Scalar: 25%
				Configuration: Tank Weapon Knockback Scalar: 0%
				Damage Dealt: 70%
				Health: 125%
				Infinite Ultimate Duration: On
				Movement Gravity: 400%
				Movement Speed: 149%
				Primary Fire: Off
				Projectile Speed: 500%
				Quick Melee: Off
				Reconfigure: Off
				Spawn With Ultimate Ready: On
				Ultimate Duration: 500%
				Ultimate Generation - Combat Configuration: Tank: 500%
				Ultimate Generation - Passive Configuration: Tank: 500%
				Ultimate Generation Configuration: Tank: 500%
			}

			D.Va
			{
				Boosters: Off
				Defense Matrix: Off
				Health: 50%
				Micro Missiles Cooldown Time: 50%
				Movement Gravity: 25%
				Movement Speed: 300%
				Projectile Speed: 500%
				Ultimate Ability Self-Destruct: Off
			}

			Genji
			{
				Ammunition Clip Size Scalar: 25%
				Damage Dealt: 55%
				Deflect Cooldown Time: 25%
				Health: 300%
				Infinite Ultimate Duration: On
				Movement Gravity: 78%
				No Ammunition Requirement: On
				Primary Fire: Off
				Projectile Speed: 500%
				Spawn With Ultimate Ready: On
				Swift Strike Cooldown Time: 25%
				Ultimate Duration: 25%
				Ultimate Generation - Combat Dragonblade: 500%
				Ultimate Generation - Passive Dragonblade: 500%
				Ultimate Generation Dragonblade: 500%
			}

			Lúcio
			{
				Amp It Up: Off
				Crossfade: Off
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Dealt: 10%
				Healing Received: 10%
				Health: 10%
				Jump Vertical Speed: 25%
				Primary Fire: Off
				Projectile Speed: 0%
				Quick Melee: Off
				Soundwave: Off
				Soundwave Knockback Scalar: 300%
				Ultimate Ability Sound Barrier: Off
			}

			Moira
			{
				Biotic Energy Maximum: 111%
				Damage Dealt: 133%
				Healing Dealt: 87%
			}

			Pharah
			{
				Ammunition Clip Size Scalar: 500%
				Damage Dealt: 60%
				Health: 75%
				Hover Jets: Off
				Jump Jet Acceleration Scalar: 125%
				Jump Jet Cooldown Time: 80%
				Projectile Speed: 500%
				Rocket Launcher Knockback Scalar: 0%
			}

			Soldier: 76
			{
				Health: 125%
				Projectile Speed: 110%
			}

			Sombra
			{
				Damage Dealt: 125%
				Hack: Off
				Projectile Speed: 500%
				Spawn With Ultimate Ready: On
			}

			Tracer
			{
				Blink: Off
				Health: 175%
				Recall: Off
			}

			Widowmaker
			{
				Ultimate Duration: 75%
			}

			enabled heroes
			{
				Genji
			}
		}
	}
}

rule("default")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Bastion);
		Hero Of(Event Player) != Hero(Soldier: 76);
		Hero Of(Event Player) != Hero(Brigitte);
		Hero Of(Event Player) != Hero(Doomfist);
		Hero Of(Event Player) != Hero(D.Va);
		Hero Of(Event Player) != Hero(Mercy);
		Hero Of(Event Player) != Hero(Moira);
		Hero Of(Event Player) != Hero(Orisa);
		Hero Of(Event Player) != Hero(Pharah);
		Hero Of(Event Player) != Hero(Reaper);
		Hero Of(Event Player) != Hero(Reinhardt);
		Hero Of(Event Player) != Hero(Roadhog);
		Hero Of(Event Player) != Hero(Symmetra);
		Hero Of(Event Player) != Hero(Winston);
		Hero Of(Event Player) != Hero(Wrecking Ball);
		Hero Of(Event Player) != Hero(Zarya);
	}

	actions
	{
		Event Player.K = -1.500;
		Event Player.L = 50;
		Event Player.M= 1.500;
		Event Player.N = 1.500;
	}
}

rule("testing: hud")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Position Of(Event Player), Left, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Velocity Of(Event Player), Left, 1, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Facing Direction Of(Event Player), Left, 2, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Event Player.D, Left, 3, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
	}
}

rule("减少集结时间")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(6);
	}
}

rule("第三人称")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Players On Hero(Hero(Genji), All Teams) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Start Camera(Event Player, Event Player + World Vector Of(Vector(-0.800, 0, 0), Event Player, Rotation)
			+ Up * Event Player.M + Facing Direction Of(Event Player) * Event Player.K,
			Event Player + Up * Event Player.N + Facing Direction Of(Event Player) * Event Player.L, 100);
		Wait(0.250, Ignore Condition);
		Abort If Condition Is False;
	}
}

disabled rule("解除第三人称")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Stop Camera(Event Player);
	}
}

disabled rule("Genji 击杀后回血")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Genji;
	}

	conditions
	{
		Event Player == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Explosion, Color(Green), Victim, 1);
		Heal(Event Player, Event Player, 30);
		Play Effect(Event Player, Buff Impact Sound, Color(Green), Event Player, 1);
	}
}

rule("Genji 刀砍特效")
{
	event
	{
		Player Dealt Damage;
		All;
		Genji;
	}

	conditions
	{
		Event Damage == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Explosion, Color(Green), Victim, 0.400);
	}
}

rule("Genji 击杀对话")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Genji;
	}

	actions
	{
		Communicate(Event Player, Voice Line Right);
	}
}

rule("Genji 刀砍硬直")
{
	event
	{
		Player Dealt Damage;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Set Status(Victim, Null, Stunned, 0.050);
	}
}

rule("Genji弹反")
{
	event
	{
		Player Dealt Damage;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Knocked Down, 0.350);
	}
}

rule("Genji防守")
{
	event
	{
		Player Dealt Damage;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Button Held(Victim, Button(Primary Fire)) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Invincible, 0.350);
		Set Status(Event Player, Null, Stunned, 0.350);
	}
}

disabled rule("Soldier Bullet Hit Effect")
{
	event
	{
		Player Dealt Damage;
		All;
		Soldier: 76;
	}

	conditions
	{
		Event Damage == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Bad Explosion, Color(Blue), Victim, 0.600);
	}
}

disabled rule("Soldier Bullet Kill Effect")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Soldier: 76;
	}

	conditions
	{
		Event Player == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Bad Explosion, Color(Blue), Event Player, 1);
	}
}

disabled rule("Baptiste Bullet Hit Effect")
{
	event
	{
		Player Dealt Damage;
		All;
		Baptiste;
	}

	conditions
	{
		Event Damage == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Bad Explosion, Color(Green), Victim, 0.600);
	}
}

disabled rule("Baptiste Bullet Kill Effect")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Baptiste;
	}

	conditions
	{
		Event Player == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Bad Explosion, Color(Green), Event Player, 1);
	}
}

disabled rule("Enable Third Person Soldier")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Players On Hero(Hero(Soldier: 76), All Teams) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	actions
	{
		Start Camera(Event Player, Event Player + World Vector Of(Vector(-0.600, 0, 0), Event Player, Rotation)
			+ Up * Event Player.C + Facing Direction Of(Event Player) * Event Player.A,
			Event Player + Up * Event Player.D + Facing Direction Of(Event Player) * Event Player.B, 100);
		Wait(0.250, Ignore Condition);
	}
}

disabled rule("Enable Third Person Baptiste")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Players On Hero(Hero(Baptiste), All Teams) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	actions
	{
		Start Camera(Event Player, Event Player + World Vector Of(Vector(-0.600, 0, 0), Event Player, Rotation)
			+ Up * Event Player.C + Facing Direction Of(Event Player) * Event Player.A,
			Event Player + Up * Event Player.D + Facing Direction Of(Event Player) * Event Player.B, 100);
		Wait(0.250, Ignore Condition);
	}
}

disabled rule("hud text")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	actions
	{
		Create HUD Text(Event Player, Position Of(Event Player), Null, Null, Left, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
	}
}

disabled rule("D.Va规则: die when out of mech")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Max Health(Event Player) <= 150;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Kill(Event Player, Event Player.K);
	}
}

disabled rule("PresS to Space fly D.va")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Has Spawned(Players On Hero(Hero(D.Va), All Teams)) == True;
		Is Alive(Players On Hero(Hero(D.Va), All Teams)) == True;
		Is Button Held(Players On Hero(Hero(D.Va), All Teams), Button(Jump)) == True;
	}

	actions
	{
		Start Accelerating(Players On Hero(Hero(D.Va), All Teams), Up, 80, 10, To Player, Direction Rate and Max Speed);
		Wait(0.150, Ignore Condition);
		Stop Accelerating(Event Player);
		Start Accelerating(Players On Hero(Hero(D.Va), All Teams), Forward, 10000, 10000, To Player, Direction Rate and Max Speed);
		Abort If Condition Is False;
	}
}

disabled rule("go to space")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Has Spawned(Players On Hero(Hero(D.Va), All Teams)) == True;
		Is Alive(Event Player) == True;
		Y Component Of(Position Of(Event Player)) < 100;
	}

	actions
	{
		Teleport(Event Player, Vector(Random Real(-100, 100), 600, Random Real(-100, 100)));
		Wait(1, Abort When False);
		Loop If Condition Is True;
	}
}

disabled rule("starfield effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Event Player.S = Position Of(Event Player) + Facing Direction Of(Event Player) * 10;
		Create Effect(Event Player, Sparkles, Color(White), Event Player.S, 50, None);
		Event Player.E = Last Created Entity;
		Wait(1, Ignore Condition);
		Destroy Effect(Event Player.E);
		Loop;
	}
}

disabled rule("Stop Movement D.va")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Event Player == True;
	}

	actions
	{
		Stop Accelerating(Event Player);
	}
}

disabled rule("Grav")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Event Player == Hero(D.Va);
	}

	actions
	{
		Set Gravity(Players On Hero(Hero(D.Va), All Teams), 0);
	}
}

disabled rule("Grav Reset")
{
	event
	{
		Player Died;
		All;
		D.Va;
	}

	conditions
	{
		Event Player == Hero(D.Va);
	}

	actions
	{
		Set Gravity(Event Player, 100);
	}
}

disabled rule("D.va Hit Effect")
{
	event
	{
		Player Dealt Damage;
		All;
		D.Va;
	}

	conditions
	{
		Event Damage == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Bad Explosion, Color(Yellow), Victim, 0.800);
	}
}

disabled rule("D.va Kill Effect")
{
	event
	{
		Player Dealt Final Blow;
		All;
		D.Va;
	}

	conditions
	{
		Event Player == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Bad Explosion, Color(Yellow), Event Player, 1);
	}
}